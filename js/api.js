// API —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±—ç–∫–µ–Ω–¥–æ–º
const ApiService = {
    // –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    token: '12ea-9ef0-c86000245pvc',
    
    // –ë–∞–∑–æ–≤—ã–π URL API
    baseUrl: 'https://d.tomato-pizza.ru:44300/ERP/hs/tomatoERP/System',

    // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ ERP API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async toggleERPServices() {
        let response;
        try {
            const targetUrl = `${this.baseUrl}/ServicesOnOff`;
            
            console.log('üîß –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:');
            console.log('URL:', targetUrl);
            console.log('Method: POST');
            console.log('Headers:', {
                'token': this.token,
                'Content-Type': 'application/json'
            });

            response = await fetch(targetUrl, {
                method: 'POST',
                headers: {
                    'token': this.token,
                    'Content-Type': 'application/json',
                }
            });

            console.log('üì° –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:');
            console.log('Status:', response.status);
            console.log('Status Text:', response.statusText);
            console.log('OK:', response.ok);

            if (!response.ok) {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏
                let errorBody = '';
                try {
                    errorBody = await response.text();
                } catch (e) {
                    errorBody = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—à–∏–±–∫–∏';
                }
                
                const errorDetails = {
                    status: response.status,
                    statusText: response.statusText,
                    body: errorBody,
                    url: targetUrl
                };
                
                console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', errorDetails);
                throw new Error(`HTTP ${response.status}: ${response.statusText}. Body: ${errorBody}`);
            }

            // –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ plain text (—Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç, –Ω–µ JSON)
            const responseBody = await response.text();
            console.log('üì¶ –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:', responseBody);
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            return this.parseTextResponse(responseBody);
            
        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            const enhancedError = new Error(this.enhanceErrorMessage(error, response));
            enhancedError.originalError = error;
            enhancedError.response = response;
            
            throw enhancedError;
        }
    },

    // –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    parseTextResponse(text) {
        console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', text);
        
        const result = {
            rawResponse: text,
            status: 'unknown',
            message: text
        };

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        const lowerText = text.toLowerCase();
        
        if (lowerText.includes('–≤–∫–ª—é—á–µ–Ω–æ') || lowerText.includes('on') || lowerText.includes('enabled')) {
            result.status = 'enabled';
            result.state = 'on';
        } else if (lowerText.includes('–≤—ã–∫–ª—é—á–µ–Ω–æ') || lowerText.includes('off') || lowerText.includes('disabled')) {
            result.status = 'disabled';
            result.state = 'off';
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
        const serviceMatch = text.match(/^([^:]+):/);
        if (serviceMatch) {
            result.service = serviceMatch[1].trim();
        }

        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', result);
        return result;
    },

    // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    enhanceErrorMessage(error, response) {
        let message = error.message;
        
        if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
            message = '–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n' +
                     '‚Ä¢ CORS –ø–æ–ª–∏—Ç–∏–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å\n' +
                     '‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n' +
                     '‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é';
        }
        
        if (response) {
            message += `\n\nüìã –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:\n` +
                      `Status: ${response.status} ${response.statusText}\n` +
                      `URL: ${response.url}`;
        }
        
        return message;
    }
};
