// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const TelegramService = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –î–ê–ù–ù–´–ï)
    config: {
        botToken: '8327060232:AAHctUprj0nLxO1dY0LZXf88Nyl059PV1UQ', // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        apiUrl: 'https://api.telegram.org/bot',
        defaultChatId: '2380747129' // ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üîÑ TelegramService: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendMessage(chatId, message, options = {}) {
        try {
            const targetChatId = chatId || this.config.defaultChatId;
            const url = `${this.config.apiUrl}${this.config.botToken}/sendMessage`;
            
            const payload = {
                chat_id: targetChatId,
                text: message,
                parse_mode: 'HTML',
                ...options
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', {
                chatId: targetChatId,
                messageLength: message.length,
                url: url.replace(this.config.botToken, '***')
            });

            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.ok) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                return { success: true, messageId: result.result.message_id };
            } else {
                throw new Error(result.description || 'Unknown Telegram API error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return { 
                success: false, 
                error: error.message,
                details: this.parseError(error)
            };
        }
    },

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ Telegram API
    parseError(error) {
        const message = error.message.toLowerCase();
        
        if (message.includes('chat not found')) {
            return '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID';
        } else if (message.includes('bot was blocked')) {
            return '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ';
        } else if (message.includes('not enough rights')) {
            return '–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π';
        } else if (message.includes('message is too long')) {
            return '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ';
        } else {
            return '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞';
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async checkBotAvailability() {
        try {
            const url = `${this.config.apiUrl}${this.config.botToken}/getMe`;
            const response = await fetch(url);
            const result = await response.json();
            
            return result.ok;
        } catch (error) {
            console.error('‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async sendFormattedMessage(chatId, title, message, type = 'info') {
        const icons = {
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            success: '‚úÖ',
            event: 'üìÖ'
        };

        const formattedMessage = `
<b>${icons[type]} ${title}</b>

${message}

<code>üïí ${new Date().toLocaleString('ru-RU')}</code>
        `.trim();

        return await this.sendMessage(chatId, formattedMessage);
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    TelegramService.init();
});