// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const TelegramService = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    config: {
        botToken: '8327060232:AAHctUprj0nLxO1dY0LZXf88Nyl059PV1UQ',
        apiUrl: 'https://api.telegram.org/bot',
        defaultChatId: '1002380747129'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üîÑ TelegramService: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const configValid = this.validateConfiguration();
        if (configValid) {
            this.testConfiguration();
        } else {
            this.showConfigurationError();
        }
        
        return configValid;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validateConfiguration() {
        const hasToken = this.config.botToken && 
                        this.config.botToken.length > 20;
        
        const hasChatId = this.config.defaultChatId && 
                         this.config.defaultChatId.length > 5;
        
        if (!hasToken) {
            console.error('‚ùå TelegramService: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π');
            return false;
        }
        
        if (!hasChatId) {
            console.error('‚ùå TelegramService: CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }
        
        console.log('‚úÖ TelegramService: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
        console.log('ü§ñ –ë–æ—Ç —Ç–æ–∫–µ–Ω:', this.config.botToken.substring(0, 10) + '...');
        console.log('üí¨ –ß–∞—Ç ID:', this.config.defaultChatId);
        
        return true;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    showConfigurationError() {
        const errorMessage = `
‚ùå Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!

–î–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:

1. –ü–æ–ª—É—á–∏—Ç—å BOT_TOKEN —É @BotFather
2. –ü–æ–ª—É—á–∏—Ç—å CHAT_ID —Ä–∞–±–æ—á–µ–≥–æ —á–∞—Ç–∞
3. –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ telegram-service.js

–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
‚Ä¢ BOT_TOKEN: ${this.config.botToken ? '–ù–ê–°–¢–†–û–ï–ù' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}
‚Ä¢ CHAT_ID: ${this.config.defaultChatId ? '–ù–ê–°–¢–†–û–ï–ù' : '–ù–ï –ù–ê–°–¢–†–û–ï–ù'}

–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –¥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!
        `.trim();

        console.error(errorMessage);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if (typeof DialogService !== 'undefined') {
            setTimeout(() => {
                DialogService.showMessage(
                    '‚ùå Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                    '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.',
                    'error'
                );
            }, 2000);
        }
    },

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async testConfiguration() {
        const configValid = this.validateConfiguration();
        if (!configValid) {
            return false;
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...');
        
        const isAvailable = await this.checkBotAvailability();
        if (isAvailable) {
            console.log('‚úÖ TelegramService: –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            const botInfo = await this.getBotInfo();
            if (botInfo.success) {
                console.log(`ü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.firstName})`);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (typeof DialogService !== 'undefined') {
                    setTimeout(() => {
                        DialogService.showMessage(
                            '‚úÖ Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω',
                            `–ë–æ—Ç @${botInfo.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!\n\n–°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.`,
                            'success'
                        );
                    }, 1000);
                }
            }
            
            return true;
        } else {
            console.error('‚ùå TelegramService: –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω');
            
            if (typeof DialogService !== 'undefined') {
                setTimeout(() => {
                    DialogService.showMessage(
                        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
                        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram –±–æ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.',
                        'error'
                    );
                }, 1000);
            }
            
            return false;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendMessage(chatId, message, options = {}) {
        try {
            const targetChatId = chatId || this.config.defaultChatId;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if (!this.validateConfiguration()) {
                throw new Error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            const url = `${this.config.apiUrl}${this.config.botToken}/sendMessage`;
            
            const payload = {
                chat_id: targetChatId,
                text: message,
                parse_mode: 'HTML',
                ...options
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', {
                chatId: targetChatId,
                messageLength: message.length,
                url: url.replace(this.config.botToken, '***') // –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
            });

            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            
            if (result.ok) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                return { success: true, messageId: result.result.message_id };
            } else {
                throw new Error(result.description || 'Unknown Telegram API error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return { 
                success: false, 
                error: error.message,
                details: this.parseError(error)
            };
        }
    },

    // –ü–∞—Ä—Å–∏–Ω–≥ –æ—à–∏–±–æ–∫ Telegram API
    parseError(error) {
        const message = error.message.toLowerCase();
        
        if (message.includes('chat not found')) {
            return '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHAT_ID';
        } else if (message.includes('bot was blocked')) {
            return '–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ';
        } else if (message.includes('not enough rights')) {
            return '–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π';
        } else if (message.includes('message is too long')) {
            return '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ';
        } else if (message.includes('bot_token')) {
            return '–ù–µ–≤–µ—Ä–Ω—ã–π BOT_TOKEN';
        } else if (message.includes('network') || message.includes('fetch')) {
            return '–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º';
        } else {
            return '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Telegram';
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async checkBotAvailability() {
        try {
            if (!this.config.botToken) {
                return false;
            }
            
            const url = `${this.config.apiUrl}${this.config.botToken}/getMe`;
            const response = await fetch(url);
            
            if (!response.ok) {
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–∞:', response.status);
                return false;
            }
            
            const result = await response.json();
            
            if (result.ok) {
                console.log('‚úÖ –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω:', result.result);
                return true;
            } else {
                console.error('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result.description);
                return false;
            }
            
        } catch (error) {
            console.error('‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async sendFormattedMessage(chatId, title, message, type = 'info') {
        const icons = {
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            success: '‚úÖ',
            event: 'üìÖ'
        };

        const formattedMessage = `
<b>${icons[type]} ${title}</b>

${message}

<code>üïí ${new Date().toLocaleString('ru-RU')}</code>
        `.trim();

        return await this.sendMessage(chatId, formattedMessage);
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    async getBotInfo() {
        try {
            const url = `${this.config.apiUrl}${this.config.botToken}/getMe`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.ok) {
                return {
                    success: true,
                    username: result.result.username,
                    firstName: result.result.first_name,
                    id: result.result.id
                };
            } else {
                throw new Error(result.description);
            }
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async sendTestMessage() {
        const testMessage = `
<b>üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.

<code>üïí ${new Date().toLocaleString('ru-RU')}</code>
        `.trim();

        const result = await this.sendFormattedMessage(
            this.config.defaultChatId,
            '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
            'success'
        );

        return result;
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    TelegramService.init();
});