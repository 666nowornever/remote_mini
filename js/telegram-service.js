// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot API
const TelegramService = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    config: {
        botToken: '8327060232:AAHctUprj0nLxO1dY0LZXf88Nyl059PV1UQ',
        apiUrl: 'https://api.telegram.org/bot',
        defaultChatId: '1002380747129'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üîÑ TelegramService: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        const configValid = this.validateConfiguration();
        if (configValid) {
            this.testConfiguration();
        }
        
        return configValid;
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    validateConfiguration() {
        const hasToken = this.config.botToken && 
                        this.config.botToken.length > 20;
        
        const hasChatId = this.config.defaultChatId && 
                         this.config.defaultChatId.length > 5;
        
        if (!hasToken) {
            console.error('‚ùå TelegramService: BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π');
            return false;
        }
        
        if (!hasChatId) {
            console.error('‚ùå TelegramService: CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            return false;
        }
        
        console.log('‚úÖ TelegramService: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
        return true;
    },

    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    async testConfiguration() {
        const configValid = this.validateConfiguration();
        if (!configValid) {
            return false;
        }
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞...');
        
        const isAvailable = await this.checkBotAvailability();
        if (isAvailable) {
            console.log('‚úÖ TelegramService: –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            const botInfo = await this.getBotInfo();
            if (botInfo.success) {
                console.log(`ü§ñ –ë–æ—Ç: @${botInfo.username} (${botInfo.firstName})`);
            }
            
            return true;
        } else {
            console.error('‚ùå TelegramService: –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω');
            return false;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
    async sendMessage(chatId, message, options = {}) {
        try {
            const targetChatId = chatId || this.config.defaultChatId;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            if (!this.validateConfiguration()) {
                throw new Error('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
            }

            const url = `${this.config.apiUrl}${this.config.botToken}/sendMessage`;
            
            const payload = {
                chat_id: targetChatId,
                text: message,
                parse_mode: 'HTML',
                ...options
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');

            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            
            if (result.ok) {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                return { success: true, messageId: result.result.message_id };
            } else {
                throw new Error(result.description || 'Unknown Telegram API error');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            return { 
                success: false, 
                error: error.message
            };
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
    async checkBotAvailability() {
        try {
            if (!this.config.botToken) {
                return false;
            }
            
            const url = `${this.config.apiUrl}${this.config.botToken}/getMe`;
            const response = await fetch(url);
            
            if (!response.ok) {
                return false;
            }
            
            const result = await response.json();
            return result.ok;
            
        } catch (error) {
            console.error('‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    async sendFormattedMessage(chatId, title, message, type = 'info') {
        const icons = {
            info: '‚ÑπÔ∏è',
            warning: '‚ö†Ô∏è',
            error: '‚ùå',
            success: '‚úÖ',
            event: 'üìÖ'
        };

        const formattedMessage = `
<b>${icons[type]} ${title}</b>

${message}

<code>üïí ${new Date().toLocaleString('ru-RU')}</code>
        `.trim();

        return await this.sendMessage(chatId, formattedMessage);
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    async getBotInfo() {
        try {
            const url = `${this.config.apiUrl}${this.config.botToken}/getMe`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.ok) {
                return {
                    success: true,
                    username: result.result.username,
                    firstName: result.result.first_name,
                    id: result.result.id
                };
            } else {
                throw new Error(result.description);
            }
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async sendTestMessage() {
        const testMessage = `
<b>üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.

‚úÖ –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç.

<code>üïí ${new Date().toLocaleString('ru-RU')}</code>
        `.trim();

        const result = await this.sendFormattedMessage(
            this.config.defaultChatId,
            '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
            '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
            'success'
        );

        return result;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–ª—è –ø–æ–∏—Å–∫–∞ CHAT_ID)
    async getUpdates() {
        try {
            const url = `${this.config.apiUrl}${this.config.botToken}/getUpdates`;
            const response = await fetch(url);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const result = await response.json();
            
            if (result.ok) {
                return result.result;
            } else {
                throw new Error(result.description);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
            return null;
        }
    },

    // –ù–∞–π—Ç–∏ CHAT_ID –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
    async findChatId() {
        console.log('üîç –ü–æ–∏—Å–∫ CHAT_ID –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö...');
        
        const updates = await this.getUpdates();
        if (!updates || updates.length === 0) {
            return null;
        }
        
        const chatIds = [];
        
        updates.forEach(update => {
            if (update.message) {
                const chat = update.message.chat;
                chatIds.push({
                    id: chat.id,
                    type: chat.type,
                    title: chat.title || `${chat.first_name} ${chat.last_name || ''}`.trim(),
                    username: chat.username
                });
            }
        });
        
        return chatIds;
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    TelegramService.init();
});