// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
const ScheduledMessagesManager = {
    currentFilter: 'all',

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        console.log('üîÑ ScheduledMessagesManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    showScheduledMessages() {
        Navigation.showPage('scheduled-view');
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    loadScheduledMessagesPage() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
        this.loadStats();
        this.loadMessages();
        this.initializeFilters();
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    loadStats() {
        const stats = MessageScheduler.getStats();
        const statsElement = document.getElementById('messagesStats');
        if (statsElement) {
            statsElement.innerHTML = `
                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">${stats.total}</div>
                        <div class="stat-label">–í—Å–µ–≥–æ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" style="color: #ff9800;">${stats.scheduled}</div>
                        <div class="stat-label">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" style="color: #4CAF50;">${stats.sent}</div>
                        <div class="stat-label">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" style="color: #f44336;">${stats.error}</div>
                        <div class="stat-label">–û—à–∏–±–∫–∏</div>
                    </div>
                </div>
            `;
        }
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    loadMessages() {
        console.log('üì® –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...');
        const messages = MessageScheduler.getAllMessages();
        console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messages.length);
        
        const filteredMessages = this.filterMessages(messages, this.currentFilter);
        const messagesList = document.getElementById('messagesList');
        
        if (messagesList) {
            if (filteredMessages.length === 0) {
                messagesList.innerHTML = `
                    <div class="no-messages">
                        <i class="fas fa-inbox"></i>
                        <p>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                    </div>
                `;
            } else {
                messagesList.innerHTML = filteredMessages.map(message => 
                    this.createMessageElement(message)
                ).join('');
            }
        }
        
        this.loadStats();
    },

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    filterMessages(messages, filter) {
        switch (filter) {
            case 'scheduled':
                return messages.filter(m => m.status === 'scheduled');
            case 'sent':
                return messages.filter(m => m.status === 'sent');
            case 'error':
                return messages.filter(m => m.status === 'error');
            case 'birthday':
                return messages.filter(m => m.eventData?.type === 'birthday');
            default:
                return messages;
        }
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    createMessageElement(message) {
        const statusIcons = {
            scheduled: '‚è∞',
            sent: '‚úÖ',
            error: '‚ùå',
            sending: 'üîÑ'
        };

        const statusColors = {
            scheduled: '#ff9800',
            sent: '#4CAF50',
            error: '#f44336',
            sending: '#2196F3'
        };

        const statusTexts = {
            scheduled: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            sent: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
            error: '–û—à–∏–±–∫–∞',
            sending: '–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è'
        };

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        let messageType = '–û–±—ã—á–Ω–æ–µ';
        let typeIcon = 'üìù';
        
        if (message.eventData?.type === 'birthday') {
            messageType = message.eventData.birthdayType === 'congratulation' ? '–î–† üéâ' : '–î–† üìÖ';
            typeIcon = message.eventData.birthdayType === 'congratulation' ? 'üéÇ' : 'üìÖ';
        } else if (message.eventData?.type === 'calendar_event') {
            messageType = '–ö–∞–ª–µ–Ω–¥–∞—Ä—å';
            typeIcon = 'üìÖ';
        }

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const messageDate = new Date(message.timestamp);
        const formattedDate = messageDate.toLocaleString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });

        return `
            <div class="message-item" data-message-id="${message.id}">
                <div class="message-header">
                    <div class="message-type">
                        ${typeIcon} ${messageType}
                    </div>
                    <div class="message-status" style="color: ${statusColors[message.status]}">
                        ${statusIcons[message.status]} ${statusTexts[message.status]}
                    </div>
                </div>
                <div class="message-time">
                    ${formattedDate}
                </div>
                <div class="message-content">
                    ${message.message}
                </div>
                ${message.eventData?.birthdayName ? `
                    <div class="message-birthday-info">
                        <i class="fas fa-user"></i>
                        ${message.eventData.birthdayName}
                    </div>
                ` : ''}
                <div class="message-actions">
                    ${message.status === 'scheduled' ? `
                        <button class="btn-cancel-message" onclick="ScheduledMessagesManager.cancelMessage('${message.id}')">
                            <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                    ` : ''}
                    ${message.status === 'error' ? `
                        <button class="btn-retry-message" onclick="ScheduledMessagesManager.retryMessage('${message.id}')">
                            <i class="fas fa-redo"></i> –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
                        </button>
                    ` : ''}
                </div>
                ${message.error ? `
                    <div class="message-error">
                        <i class="fas fa-exclamation-triangle"></i>
                        ${message.error}
                    </div>
                ` : ''}
            </div>
        `;
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    initializeFilters() {
        const filterButtons = document.querySelectorAll('.filter-btn');
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                filterButtons.forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                this.currentFilter = btn.dataset.filter;
                this.loadMessages();
            });
        });
    },

    // –û—Ç–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    cancelMessage(messageId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?')) {
            const success = MessageScheduler.cancelScheduledMessage(messageId);
            if (success) {
                this.loadMessages();
                DialogService.showMessage('‚úÖ –£—Å–ø–µ—Ö', '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', 'success');
            } else {
                DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 'error');
            }
        }
    },

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π
    retryMessage(messageId) {
        const messages = MessageScheduler.getAllMessages();
        const message = messages.find(m => m.id === messageId);
        
        if (message && message.status === 'error') {
            MessageScheduler.updateMessageStatus(messageId, 'scheduled');
            this.loadMessages();
            DialogService.showMessage('‚úÖ –£—Å–ø–µ—Ö', '–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏', 'success');
        }
    },

    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    cleanupMessages() {
        if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π?')) {
            MessageScheduler.cleanupOldMessages();
            this.loadMessages();
            DialogService.showMessage('‚úÖ –£—Å–ø–µ—Ö', '–°—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã', 'success');
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
    refreshMessages() {
        this.loadMessages();
        DialogService.showMessage('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ', '–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω', 'info');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (typeof ScheduledMessagesManager !== 'undefined' && ScheduledMessagesManager.init) {
        ScheduledMessagesManager.init();
    }
});