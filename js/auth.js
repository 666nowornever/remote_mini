// –í–∞—Ä–∏–∞–Ω—Ç—ã CORS Proxy
const CORS_PROXIES = [
    'https://api.allorigins.win/raw?url=',
    'https://cors-anywhere.herokuapp.com/',
    'https://thingproxy.freeboard.io/fetch/',
    'https://corsproxy.io/?'
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const Auth = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
    API_CONFIG: {
        // –ú–µ–Ω—è–π—Ç–µ –∏–Ω–¥–µ–∫—Å [0] –Ω–∞ [1], [2], [3] –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        URL: CORS_PROXIES[0] + encodeURIComponent('https://wh.tomato-pizza.ru:443/webhook/hs/tomatohook/CheckingAccessRights'),
        TOKEN: '6b852788-cc29-430f-94c8-bf45852b08c4',
        proxyIndex: 0 // –ú–µ–Ω—è–π—Ç–µ —ç—Ç–æ—Ç –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ proxy –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    },

    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API —Å —Ä–æ—Ç–∞—Ü–∏–µ–π proxy
    checkAccess: async function(userId) {
        let lastError = null;
        
        // –ü—Ä–æ–±—É–µ–º –≤—Å–µ proxy –ø–æ –æ—á–µ—Ä–µ–¥–∏
        for (let i = 0; i < CORS_PROXIES.length; i++) {
            try {
                const proxyUrl = CORS_PROXIES[i] + encodeURIComponent('https://wh.tomato-pizza.ru:443/webhook/hs/tomatohook/CheckingAccessRights');
                console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${CORS_PROXIES.length} —á–µ—Ä–µ–∑ proxy:`, CORS_PROXIES[i]);
                
                const response = await fetch(proxyUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'token': this.API_CONFIG.TOKEN
                    },
                    body: JSON.stringify({ id: parseInt(userId) })
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ proxy', i);
                    return {
                        success: true,
                        canUse: result.canUse === true,
                        message: result.canUse ? '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' : '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π'
                    };
                }
            } catch (error) {
                lastError = error;
                console.warn(`‚ùå Proxy ${i} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error);
                // –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π proxy
            }
        }
        
        console.error('‚ùå –í—Å–µ proxy –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
        return {
            success: false,
            canUse: false,
            message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Å–µ proxy'
        };
    }
};
