// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ API
const Auth = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
    API_CONFIG: {
        baseUrl: 'https://wh.tomato-pizza.ru:443/webhook/hs/tomatohook',
        token: '6b852788-cc29-430f-94c8-bf45852b08c4'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initialize: async function() {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();

        const user = tg.initDataUnsafe.user;
        
        if (!user) {
            this.showAccessDenied('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            return false;
        }

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï ===');
        console.log('User ID:', user.id);
        console.log('Username:', user.username);
        console.log('First name:', user.first_name);
        console.log('Language:', user.language_code);
        console.log('========================');

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API
        try {
            const accessGranted = await this.checkAccessRights(user.id);
            
            if (accessGranted) {
                this.showApp();
                return true;
            } else {
                this.showAccessDenied(null, user);
                return false;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞:', error);
            this.showAccessDenied('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', user);
            return false;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API
    async checkAccessRights(userId) {
        console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        const url = `${this.API_CONFIG.baseUrl}/CheckingAccessRights`;
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'token': this.API_CONFIG.token,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    id: userId
                })
            });

            console.log('üì° –û—Ç–≤–µ—Ç API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:');
            console.log('Status:', response.status);
            console.log('OK:', response.ok);

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            console.log('üì¶ –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);

            return data.canUse === true;

        } catch (error) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:', error);
            
            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                console.error('üîß –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ CORS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
                console.error('1. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞:', url);
                console.error('2. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
                console.error('3. –°–µ—Ç–µ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            }
            
            throw error;
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    showApp: function() {
        document.getElementById('app').classList.remove('hidden');
        document.getElementById('accessDenied').classList.add('hidden');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
    showAccessDenied: function(reason, user = null) {
        document.getElementById('app').classList.add('hidden');
        document.getElementById('accessDenied').classList.remove('hidden');
        
        const deniedUserInfo = document.getElementById('deniedUserInfo');
        
        if (user) {
            deniedUserInfo.innerHTML = `
                <strong>–í–∞—à ID:</strong> ${user.id}<br>
                <strong>–ò–º—è:</strong> ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}<br>
                <strong>Username:</strong> @${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}<br>
                <strong>–°—Ç–∞—Ç—É—Å:</strong> ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω<br>
                <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–∞'}
            `;
        } else {
            deniedUserInfo.innerHTML = `<strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}`;
        }
        
        console.warn('üö´ –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù:', user);
    },

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏)
    manualCheck: async function(userId) {
        try {
            const result = await this.checkAccessRights(userId);
            console.log(`üîç –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è ${userId}:`, result);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
            return false;
        }
    }
};
