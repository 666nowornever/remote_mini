// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const Auth = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
    API_CONFIG: {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º CORS proxy –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        URL: 'https://api.allorigins.win/raw?url=' + encodeURIComponent('https://wh.tomato-pizza.ru:443/webhook/hs/tomatohook/CheckingAccessRights'),
        TOKEN: '6b852788-cc29-430f-94c8-bf45852b08c4'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initialize: async function() {
        try {
            const tg = window.Telegram.WebApp;
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
            tg.ready();
            tg.expand();

            console.log('=== –î–ê–ù–ù–´–ï TELECRAM WEB APP ===');
            console.log('–í–µ—Ä—Å–∏—è Telegram Web App:', tg.version);
            console.log('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', tg.platform);
            console.log('Init Data:', tg.initData);
            console.log('Init Data Unsafe:', tg.initDataUnsafe);
            console.log('========================');

            // üîß –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const TEST_USER_ID = 838646989; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
            console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º User ID –¥–ª—è —Ç–µ—Å—Ç–∞:', TEST_USER_ID);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ API
            const accessResult = await this.checkAccess(TEST_USER_ID);
            
            if (accessResult.success && accessResult.canUse) {
                this.showApp();
                return true;
            } else {
                this.showAccessDenied(accessResult.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π', TEST_USER_ID);
                return false;
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showAccessDenied('–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞');
            return false;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API
    checkAccess: async function(userId) {
        try {
            console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞...');
            console.log('User ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', userId);
            
            const requestBody = {
                id: parseInt(userId)
            };

            console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody));
            console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', this.API_CONFIG.URL);

            const response = await fetch(this.API_CONFIG.URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'token': this.API_CONFIG.TOKEN
                },
                body: JSON.stringify(requestBody)
            });

            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);
                return {
                    success: false,
                    canUse: false,
                    message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`
                };
            }

            const result = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            return {
                success: true,
                canUse: result.canUse === true,
                message: result.canUse ? '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' : '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', error);
            return {
                success: false,
                canUse: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
            };
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    showApp: function() {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('app').classList.remove('hidden');
        document.getElementById('accessDenied').classList.add('hidden');
        console.log('üéâ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
    showAccessDenied: function(reason, userId = null) {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('app').classList.add('hidden');
        document.getElementById('accessDenied').classList.remove('hidden');
        
        const deniedUserInfo = document.getElementById('deniedUserInfo');
        
        let infoHTML = `<strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}`;
        
        if (userId) {
            infoHTML += `<br><strong>–í–∞—à ID:</strong> ${userId}`;
        }
        
        deniedUserInfo.innerHTML = infoHTML;
        
        console.warn('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:', reason, 'User ID:', userId);
    }
};
