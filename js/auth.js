// üîß –†–ï–ñ–ò–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ true –¥–ª—è —Ç–µ—Å—Ç–∞
const TEST_MODE = true;
const TEST_USER_ID = 349807461; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID


// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const Auth = {
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
    API_CONFIG: {
        URL: 'https://wh.tomato-pizza.ru:443/webhook/hs/tomatohook/CheckingAccessRights',
        TOKEN: '6b852788-cc29-430f-94c8-bf45852b08c4'
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initialize: async function() {

        if (TEST_MODE) {
            console.log('üîß –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú');
            console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π User ID:', TEST_USER_ID);
            
            const accessResult = await this.checkAccess(TEST_USER_ID);
            
            if (accessResult.success && accessResult.canUse) {
                this.showApp();
                return true;
            } else {
                this.showAccessDenied(accessResult.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π', TEST_USER_ID);
                return false;
            }
        }
        try {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();

            const user = tg.initDataUnsafe.user;
            
            if (!user) {
                this.showAccessDenied('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
                return false;
            }

            console.log('=== –î–ê–ù–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø TELECRAM ===');
            console.log('User ID:', user.id);
            console.log('User ID —Ç–∏–ø:', typeof user.id);
            console.log('Username:', user.username);
            console.log('First name:', user.first_name);
            console.log('========================');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ API
            const accessResult = await this.checkAccess(user.id);
            
            if (accessResult.success && accessResult.canUse) {
                this.showApp();
                return true;
            } else {
                this.showAccessDenied(accessResult.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', user);
                return false;
            }

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showAccessDenied('–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞');
            return false;
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ API
    checkAccess: async function(userId) {
        try {
            console.log('üîê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞...');
            console.log('URL:', this.API_CONFIG.URL);
            console.log('User ID –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', userId);
            
            const requestBody = {
                id: parseInt(userId)
            };

            console.log('üì¶ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(requestBody));

            const response = await fetch(this.API_CONFIG.URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'token': this.API_CONFIG.TOKEN
                },
                body: JSON.stringify(requestBody)
            });

            console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
            console.log('üì° –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', Object.fromEntries(response.headers.entries()));

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, errorText);
                return {
                    success: false,
                    canUse: false,
                    message: `–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status}`
                };
            }

            const result = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);
            console.log('‚úÖ canUse –∑–Ω–∞—á–µ–Ω–∏–µ:', result.canUse);
            console.log('‚úÖ canUse —Ç–∏–ø:', typeof result.canUse);

            return {
                success: true,
                canUse: result.canUse === true,
                message: result.canUse ? '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω' : '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞:', error);
            return {
                success: false,
                canUse: false,
                message: '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É'
            };
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    showApp: function() {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('app').classList.remove('hidden');
        document.getElementById('accessDenied').classList.add('hidden');
        console.log('üéâ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
    showAccessDenied: function(reason, user = null) {
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('app').classList.add('hidden');
        document.getElementById('accessDenied').classList.remove('hidden');
        
        const deniedUserInfo = document.getElementById('deniedUserInfo');
        
        let infoHTML = `<strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${reason}`;
        
        if (user) {
            infoHTML += `<br><strong>–í–∞—à ID:</strong> ${user.id}`;
            infoHTML += `<br><strong>–ò–º—è:</strong> ${user.first_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}`;
            infoHTML += `<br><strong>Username:</strong> @${user.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
        }
        
        deniedUserInfo.innerHTML = infoHTML;
        
        console.warn('üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:', reason, user);
    },

    // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    hideLoading: function() {
        document.getElementById('loading').classList.add('hidden');
    }
};
