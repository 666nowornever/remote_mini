// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–µ–∂—É—Ä—Å—Ç–≤
const CalendarManager = {
    // –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö
    dutyPersons: [
        { id: 1, name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', color: '#2196F3' },
        { id: 2, name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω', color: '#4CAF50' },
        { id: 3, name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π', color: '#FF9800' }
    ],

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    currentDate: new Date(),
    events: {},

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    init: function() {
        console.log('üîÑ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.loadEventsFromStorage();
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ localStorage
    loadEventsFromStorage: function() {
        const savedEvents = localStorage.getItem('dutyCalendarEvents');
        if (savedEvents) {
            this.events = JSON.parse(savedEvents);
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        } else {
            this.events = {};
            console.log('üìÖ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π –ø—É—Å—Ç–æ–µ');
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ localStorage
    saveEventsToStorage: function() {
        localStorage.setItem('dutyCalendarEvents', JSON.stringify(this.events));
        console.log('üíæ –°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    showCalendar: function() {
        Navigation.showPage('calendar');
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    loadCalendarPage: function() {
        this.renderCalendar();
        this.initializeCalendarHandlers();
    },

    // –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    renderCalendar: function() {
        const calendarElement = document.getElementById('calendarGrid');
        if (!calendarElement) return;

        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const monthNames = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        
        const titleElement = document.getElementById('calendarTitle');
        if (titleElement) {
            titleElement.textContent = `${monthNames[month]} ${year}`;
        }

        // –û—á–∏—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendarElement.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for (let i = 0; i < startingDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'calendar-day empty';
            calendarElement.appendChild(emptyCell);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= daysInMonth; day++) {
            const dateKey = this.getDateKey(new Date(year, month, day));
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            dayElement.dataset.date = dateKey;

            const dayNumber = document.createElement('div');
            dayNumber.className = 'calendar-day-number';
            dayNumber.textContent = day;

            const eventsContainer = document.createElement('div');
            eventsContainer.className = 'calendar-day-events';

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            if (this.events[dateKey]) {
                this.events[dateKey].forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'calendar-event';
                    eventElement.style.backgroundColor = event.color;
                    eventElement.title = `${event.person}\n${event.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                    eventsContainer.appendChild(eventElement);
                });
            }

            dayElement.appendChild(dayNumber);
            dayElement.appendChild(eventsContainer);
            dayElement.addEventListener('click', () => this.openEventModal(dateKey));

            calendarElement.appendChild(dayElement);
        }
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    initializeCalendarHandlers: function() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const prevBtn = document.getElementById('calendarPrev');
        const nextBtn = document.getElementById('calendarNext');
        const todayBtn = document.getElementById('calendarToday');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousMonth());
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextMonth());
        }
        if (todayBtn) {
            todayBtn.addEventListener('click', () => this.goToToday());
        }
    },

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
    previousMonth: function() {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.renderCalendar();
    },

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
    nextMonth: function() {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.renderCalendar();
    },

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
    goToToday: function() {
        this.currentDate = new Date();
        this.renderCalendar();
    },

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    openEventModal: function(dateKey) {
        const date = this.parseDateKey(dateKey);
        const dateString = date.toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'calendar-modal-overlay';
        modal.innerHTML = `
            <div class="calendar-modal">
                <div class="calendar-modal-header">
                    <h3>–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ ${dateString}</h3>
                    <button class="calendar-modal-close">&times;</button>
                </div>
                <div class="calendar-modal-content">
                    <div class="duty-persons-list">
                        ${this.dutyPersons.map(person => `
                            <div class="duty-person-item" data-person-id="${person.id}">
                                <div class="person-color" style="background-color: ${person.color}"></div>
                                <div class="person-name">${person.name}</div>
                                <div class="person-checkbox">
                                    <input type="checkbox" id="person-${person.id}" 
                                           ${this.isPersonOnDuty(dateKey, person.id) ? 'checked' : ''}>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                    <div class="comment-section">
                        <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                        <textarea id="eventComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–µ–∂—É—Ä—Å—Ç–≤—É...">${this.getEventComment(dateKey) || ''}</textarea>
                    </div>
                </div>
                <div class="calendar-modal-actions">
                    <button class="btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = modal.querySelector('.calendar-modal-close');
        const cancelBtn = modal.querySelector('.btn-cancel');
        const saveBtn = modal.querySelector('.btn-save');

        const closeModal = () => {
            document.body.removeChild(modal);
        };

        closeBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        saveBtn.addEventListener('click', () => {
            this.saveEvent(dateKey);
            closeModal();
            this.renderCalendar();
            this.sendNotification(dateKey);
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    saveEvent: function(dateKey) {
        const selectedPersons = [];
        const checkboxes = document.querySelectorAll('.duty-person-item input[type="checkbox"]:checked');
        
        checkboxes.forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) {
                selectedPersons.push({
                    id: person.id,
                    person: person.name,
                    color: person.color
                });
            }
        });

        const comment = document.getElementById('eventComment').value.trim();

        if (selectedPersons.length > 0) {
            this.events[dateKey] = selectedPersons.map(person => ({
                ...person,
                comment: comment
            }));
        } else {
            delete this.events[dateKey];
        }

        this.saveEventsToStorage();
        console.log(`üíæ –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –¥–∞—Ç—ã: ${dateKey}`);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ–∂—É—Ä–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    isPersonOnDuty: function(dateKey, personId) {
        return this.events[dateKey] && this.events[dateKey].some(event => event.id === personId);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –¥–∞—Ç—ã
    getEventComment: function(dateKey) {
        if (this.events[dateKey] && this.events[dateKey].length > 0) {
            return this.events[dateKey][0].comment;
        }
        return '';
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–æ—Ç–æ–º)
    sendNotification: function(dateKey) {
        const date = this.parseDateKey(dateKey);
        const dateString = date.toLocaleDateString('ru-RU');
        const events = this.events[dateKey];

        if (events && events.length > 0) {
            const persons = events.map(e => e.person).join(', ');
            const comment = events[0].comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${events[0].comment}` : '';
            
            const message = `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ ${dateString}\n–î–µ–∂—É—Ä–Ω—ã–µ: ${persons}${comment}`;
            
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', message);
            
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –±–æ—Ç–æ–º
            // await this.sendToTelegramBot(message);
            
            DialogService.showMessage(
                '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
                `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ –Ω–∞ ${dateString} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç –±–æ—Ç–∞.`,
                'success'
            );
        }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getDateKey: function(date) {
        return date.toISOString().split('T')[0]; // YYYY-MM-DD
    },

    parseDateKey: function(dateKey) {
        return new Date(dateKey + 'T00:00:00');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CalendarManager –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (typeof CalendarManager !== 'undefined' && CalendarManager.init) {
        CalendarManager.init();
    }
});