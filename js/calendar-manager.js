// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–µ–∂—É—Ä—Å—Ç–≤ –∏ –æ—Ç–ø—É—Å–∫–æ–≤
const CalendarManager = {
    // –°–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö
    dutyPersons: [
        { id: 1, name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', color: '#2196F3' },
        { id: 2, name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω', color: '#4CAF50' },
        { id: 3, name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π', color: '#FF9800' }
    ],

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
    currentDate: new Date(),
    events: {},
    vacations: {},

    // –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ (–æ–¥–∏–Ω –¥–µ–Ω—å / –Ω–µ–¥–µ–ª—è)
    selectionMode: 'day', // 'day' –∏–ª–∏ 'week'

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    init: function() {
        console.log('üîÑ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.loadEventsFromStorage();
        this.loadVacationsFromStorage();
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ localStorage
    loadEventsFromStorage: function() {
        const savedEvents = localStorage.getItem('dutyCalendarEvents');
        const savedVacations = localStorage.getItem('dutyCalendarVacations');
        
        if (savedEvents) {
            this.events = JSON.parse(savedEvents);
            console.log('üìÖ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        } else {
            this.events = {};
        }
        
        if (savedVacations) {
            this.vacations = JSON.parse(savedVacations);
            console.log('üèñÔ∏è –û—Ç–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
        } else {
            this.vacations = {};
        }
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ localStorage
    saveEventsToStorage: function() {
        localStorage.setItem('dutyCalendarEvents', JSON.stringify(this.events));
        localStorage.setItem('dutyCalendarVacations', JSON.stringify(this.vacations));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –≤—ã–±–æ—Ä–∞
    toggleSelectionMode: function() {
        this.selectionMode = this.selectionMode === 'day' ? 'week' : 'day';
        const modeBtn = document.getElementById('selectionModeBtn');
        if (modeBtn) {
            modeBtn.innerHTML = this.selectionMode === 'day' ? 
                '<i class="fas fa-calendar-day"></i> –†–µ–∂–∏–º: –î–µ–Ω—å' : 
                '<i class="fas fa-calendar-week"></i> –†–µ–∂–∏–º: –ù–µ–¥–µ–ª—è';
        }
        console.log(`üìÖ –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞: ${this.selectionMode}`);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    showCalendar: function() {
        Navigation.showPage('calendar');
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    loadCalendarPage: function() {
        this.renderCalendar();
        this.initializeCalendarHandlers();
    },

    // –†–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    renderCalendar: function() {
        const calendarElement = document.getElementById('calendarGrid');
        if (!calendarElement) return;

        const year = this.currentDate.getFullYear();
        const month = this.currentDate.getMonth();

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const monthNames = [
            '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
            '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
        ];
        
        const titleElement = document.getElementById('calendarTitle');
        if (titleElement) {
            titleElement.textContent = `${monthNames[month]} ${year}`;
        }

        // –û—á–∏—â–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendarElement.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });

        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        const startingDay = firstDay.getDay() === 0 ? 6 : firstDay.getDay() - 1;

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
        for (let i = 0; i < startingDay; i++) {
            const emptyCell = document.createElement('div');
            emptyCell.className = 'calendar-day empty';
            calendarElement.appendChild(emptyCell);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dateKey = this.getDateKey(date);
            const dayElement = document.createElement('div');
            dayElement.className = 'calendar-day';
            dayElement.dataset.date = dateKey;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π
            const isWeekend = date.getDay() === 0 || date.getDay() === 6;
            if (isWeekend) {
                dayElement.classList.add('weekend');
            }

            const dayNumber = document.createElement('div');
            dayNumber.className = 'calendar-day-number';
            dayNumber.textContent = day;

            const eventsContainer = document.createElement('div');
            eventsContainer.className = 'calendar-day-events';

            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∂—É—Ä—Å—Ç–≤–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            if (this.events[dateKey]) {
                this.events[dateKey].forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'calendar-event';
                    eventElement.style.backgroundColor = event.color;
                    eventElement.title = `${event.person}\n${event.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                    eventsContainer.appendChild(eventElement);
                });
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—É—Å–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            if (this.vacations[dateKey]) {
                this.vacations[dateKey].forEach(vacation => {
                    const vacationElement = document.createElement('div');
                    vacationElement.className = 'calendar-vacation';
                    vacationElement.style.backgroundColor = vacation.color;
                    vacationElement.title = `–û—Ç–ø—É—Å–∫: ${vacation.person}`;
                    eventsContainer.appendChild(vacationElement);
                });
            }

            dayElement.appendChild(dayNumber);
            dayElement.appendChild(eventsContainer);
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            dayElement.addEventListener('click', () => {
                if (this.selectionMode === 'day') {
                    this.openEventModal(dateKey);
                } else {
                    this.handleWeekSelection(date);
                }
            });

            calendarElement.appendChild(dayElement);
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏
    handleWeekSelection: function(selectedDate) {
        const weekDates = this.getWeekDates(selectedDate);
        const dateKeys = weekDates.map(date => this.getDateKey(date));
        
        console.log('üìÖ –í—ã–±—Ä–∞–Ω–∞ –Ω–µ–¥–µ–ª—è:', dateKeys);
        this.openEventModalForWeek(dateKeys);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞—Ç –Ω–µ–¥–µ–ª–∏
    getWeekDates: function(date) {
        const dates = [];
        const dayOfWeek = date.getDay();
        const startDate = new Date(date);
        startDate.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
        
        for (let i = 0; i < 7; i++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + i);
            dates.push(currentDate);
        }
        
        return dates;
    },

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –Ω–µ–¥–µ–ª–∏
    openEventModalForWeek: function(dateKeys) {
        const firstDate = this.parseDateKey(dateKeys[0]);
        const lastDate = this.parseDateKey(dateKeys[6]);
        
        const dateString = `${firstDate.toLocaleDateString('ru-RU')} - ${lastDate.toLocaleDateString('ru-RU')}`;

        this.openEventModal(dateKeys[0], dateKeys);
    },

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    openEventModal: function(dateKey, weekDates = null) {
        const isWeekMode = weekDates !== null;
        const date = this.parseDateKey(dateKey);
        
        let dateString;
        if (isWeekMode) {
            const firstDate = this.parseDateKey(weekDates[0]);
            const lastDate = this.parseDateKey(weekDates[6]);
            dateString = `${firstDate.toLocaleDateString('ru-RU')} - ${lastDate.toLocaleDateString('ru-RU')}`;
        } else {
            dateString = date.toLocaleDateString('ru-RU', {
                day: 'numeric',
                month: 'long',
                year: 'numeric'
            });
        }

        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.createElement('div');
        modal.className = 'calendar-modal-overlay';
        modal.innerHTML = `
            <div class="calendar-modal">
                <div class="calendar-modal-header">
                    <h3>${isWeekMode ? '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ –Ω–µ–¥–µ–ª—é' : '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞'} ${dateString}</h3>
                    <button class="calendar-modal-close">&times;</button>
                </div>
                <div class="calendar-modal-content">
                    <div class="modal-tabs">
                        <button class="tab-btn active" data-tab="duty">–î–µ–∂—É—Ä—Å—Ç–≤–æ</button>
                        <button class="tab-btn" data-tab="vacation">–û—Ç–ø—É—Å–∫</button>
                        <button class="tab-btn" data-tab="event">–°–æ–±—ã—Ç–∏–µ</button>
                    </div>
                    
                    <div class="tab-content" id="dutyTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="person-${person.id}" 
                                               ${this.isPersonOnDuty(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–µ–∂—É—Ä—Å—Ç–≤—É:</label>
                            <textarea id="eventComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–µ–∂—É—Ä—Å—Ç–≤—É...">${this.getEventComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="vacationTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="vacation-person-${person.id}" 
                                               ${this.isPersonOnVacation(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="vacationComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–ø—É—Å–∫—É:</label>
                            <textarea id="vacationComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–ø—É—Å–∫—É...">${this.getVacationComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="eventTab">
                        <div class="event-time-section">
                            <label for="eventTime">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                            <input type="time" id="eventTime" value="09:00">
                        </div>
                        <div class="comment-section">
                            <label for="eventMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:</label>
                            <textarea id="eventMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç..."></textarea>
                        </div>
                        <div class="notification-info">
                            <i class="fas fa-info-circle"></i>
                            –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                        </div>
                    </div>
                </div>
                <div class="calendar-modal-actions">
                    <button class="btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤
        this.initializeModalTabs(modal);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const closeBtn = modal.querySelector('.calendar-modal-close');
        const cancelBtn = modal.querySelector('.btn-cancel');
        const saveBtn = modal.querySelector('.btn-save');

        const closeModal = () => {
            document.body.removeChild(modal);
        };

        closeBtn.addEventListener('click', closeModal);
        cancelBtn.addEventListener('click', closeModal);

        saveBtn.addEventListener('click', () => {
            const activeTab = modal.querySelector('.tab-btn.active').dataset.tab;
            
            if (activeTab === 'duty') {
                this.saveDutyEvent(dateKey, weekDates);
            } else if (activeTab === 'vacation') {
                this.saveVacationEvent(dateKey, weekDates);
            } else if (activeTab === 'event') {
                this.saveChatEvent(dateKey, weekDates);
            }
            
            closeModal();
            this.renderCalendar();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                closeModal();
            }
        });
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    initializeModalTabs: function(modal) {
        const tabBtns = modal.querySelectorAll('.tab-btn');
        const tabContents = modal.querySelectorAll('.tab-content');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Ç–∞–±—ã
                tabBtns.forEach(b => b.classList.remove('active'));
                tabContents.forEach(c => c.classList.add('hidden'));

                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞–±
                btn.classList.add('active');
                const tabId = btn.dataset.tab + 'Tab';
                const tabContent = modal.querySelector(`#${tabId}`);
                if (tabContent) {
                    tabContent.classList.remove('hidden');
                }
            });
        });
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞
    saveDutyEvent: function(dateKey, weekDates = null) {
        const datesToSave = weekDates || [dateKey];
        const selectedPersons = [];
        const checkboxes = document.querySelectorAll('.duty-person-item input[type="checkbox"]:checked');
        
        checkboxes.forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) {
                selectedPersons.push({
                    id: person.id,
                    person: person.name,
                    color: person.color
                });
            }
        });

        const comment = document.getElementById('eventComment').value.trim();

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.events[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment
                }));
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                if (!comment) {
                    this.sendDutyNotification(date);
                }
            } else {
                delete this.events[date];
            }
        });

        this.saveEventsToStorage();
        console.log(`üíæ –î–µ–∂—É—Ä—Å—Ç–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞—Ç: ${datesToSave.join(', ')}`);
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞
    saveVacationEvent: function(dateKey, weekDates = null) {
        const datesToSave = weekDates || [dateKey];
        const selectedPersons = [];
        const checkboxes = document.querySelectorAll('#vacationTab .duty-person-item input[type="checkbox"]:checked');
        
        checkboxes.forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('vacation-person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) {
                selectedPersons.push({
                    id: person.id,
                    person: person.name,
                    color: person.color
                });
            }
        });

        const comment = document.getElementById('vacationComment').value.trim();

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.vacations[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment,
                    type: 'vacation'
                }));
            } else {
                delete this.vacations[date];
            }
        });

        this.saveEventsToStorage();
        console.log(`üèñÔ∏è –û—Ç–ø—É—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞—Ç: ${datesToSave.join(', ')}`);
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —á–∞—Ç–∞
    saveChatEvent: function(dateKey, weekDates = null) {
        const eventTime = document.getElementById('eventTime').value;
        const eventMessage = document.getElementById('eventMessage').value.trim();
        
        if (!eventMessage) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
            return;
        }

        const datesToSave = weekDates || [dateKey];
        
        datesToSave.forEach(date => {
            const eventDateTime = `${date}T${eventTime}:00`;
            this.scheduleTelegramMessage(eventDateTime, eventMessage);
        });

        console.log(`üì® –°–æ–±—ã—Ç–∏—è —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞—Ç: ${datesToSave.join(', ')}`);
    },

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    scheduleTelegramMessage: function(eventDateTime, message) {
        const eventTimestamp = new Date(eventDateTime).getTime();
        const now = Date.now();
        
        if (eventTimestamp <= now) {
            alert('–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const scheduledMessages = JSON.parse(localStorage.getItem('scheduledTelegramMessages') || '[]');
        scheduledMessages.push({
            timestamp: eventTimestamp,
            message: message,
            datetime: eventDateTime
        });
        
        localStorage.setItem('scheduledTelegramMessages', JSON.stringify(scheduledMessages));
        
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
        console.log(`‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ ${eventDateTime}: ${message}`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        this.startMessageScheduler();
    },

    // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    startMessageScheduler: function() {
        setInterval(() => {
            this.checkScheduledMessages();
        }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    checkScheduledMessages: function() {
        const scheduledMessages = JSON.parse(localStorage.getItem('scheduledTelegramMessages') || '[]');
        const now = Date.now();
        const messagesToSend = scheduledMessages.filter(msg => msg.timestamp <= now);
        
        if (messagesToSend.length > 0) {
            messagesToSend.forEach(msg => {
                this.sendToTelegramChat(msg.message);
                console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: ${msg.message}`);
            });
            
            // –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const remainingMessages = scheduledMessages.filter(msg => msg.timestamp > now);
            localStorage.setItem('scheduledTelegramMessages', JSON.stringify(remainingMessages));
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram —á–∞—Ç (–∑–∞–≥–ª—É—à–∫–∞ - –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é)
    sendToTelegramChat: function(message) {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API
        // –ü—Ä–∏–º–µ—Ä: fetch(`https://api.telegram.org/bot<YOUR_BOT_TOKEN>/sendMessage`, {
        //     method: 'POST',
        //     headers: { 'Content-Type': 'application/json' },
        //     body: JSON.stringify({
        //         chat_id: <YOUR_CHAT_ID>,
        //         text: message
        //     })
        // });
        
        console.log('üîî –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram:', message);
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
    sendDutyNotification: function(dateKey) {
        const date = this.parseDateKey(dateKey);
        const dateString = date.toLocaleDateString('ru-RU');
        const events = this.events[dateKey];

        if (events && events.length > 0) {
            const persons = events.map(e => e.person).join(', ');
            const message = `üìÖ –î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ ${dateString}\n–î–µ–∂—É—Ä–Ω—ã–µ: ${persons}`;
            
            console.log('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–∂—É—Ä—Å—Ç–≤–µ:', message);
            this.sendToTelegramChat(message);
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–µ–∂—É—Ä–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    isPersonOnDuty: function(dateKey, personId) {
        return this.events[dateKey] && this.events[dateKey].some(event => event.id === personId);
    },

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤ –æ—Ç–ø—É—Å–∫–µ –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    isPersonOnVacation: function(dateKey, personId) {
        return this.vacations[dateKey] && this.vacations[dateKey].some(vacation => vacation.id === personId);
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –¥–∞—Ç—ã
    getEventComment: function(dateKey) {
        if (this.events[dateKey] && this.events[dateKey].length > 0) {
            return this.events[dateKey][0].comment;
        }
        return '';
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–ø—É—Å–∫—É
    getVacationComment: function(dateKey) {
        if (this.vacations[dateKey] && this.vacations[dateKey].length > 0) {
            return this.vacations[dateKey][0].comment;
        }
        return '';
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—É—Å–∫–æ–≤ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    loadVacationsFromStorage: function() {
        const savedVacations = localStorage.getItem('dutyCalendarVacations');
        if (savedVacations) {
            this.vacations = JSON.parse(savedVacations);
        } else {
            this.vacations = {};
        }
    },

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    initializeCalendarHandlers: function() {
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        const prevBtn = document.getElementById('calendarPrev');
        const nextBtn = document.getElementById('calendarNext');
        const todayBtn = document.getElementById('calendarToday');
        const modeBtn = document.getElementById('selectionModeBtn');

        if (prevBtn) {
            prevBtn.addEventListener('click', () => this.previousMonth());
        }
        if (nextBtn) {
            nextBtn.addEventListener('click', () => this.nextMonth());
        }
        if (todayBtn) {
            todayBtn.addEventListener('click', () => this.goToToday());
        }
        if (modeBtn) {
            modeBtn.addEventListener('click', () => this.toggleSelectionMode());
        }
    },

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    getDateKey: function(date) {
        return date.toISOString().split('T')[0]; // YYYY-MM-DD
    },

    parseDateKey: function(dateKey) {
        return new Date(dateKey + 'T00:00:00');
    },

    previousMonth: function() {
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.renderCalendar();
    },

    nextMonth: function() {
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.renderCalendar();
    },

    goToToday: function() {
        this.currentDate = new Date();
        this.renderCalendar();
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CalendarManager –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', function() {
    if (typeof CalendarManager !== 'undefined' && CalendarManager.init) {
        CalendarManager.init();
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        CalendarManager.startMessageScheduler();
    }
});