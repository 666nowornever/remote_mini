// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–µ–∂—É—Ä—Å—Ç–≤ —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π –∏ –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
const CalendarManager = {
    // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===
    syncConfig: {
        wsUrl: 'wss://remote-api-calendar.onrender.com/ws',
        apiUrl: 'https://remote-api-calendar.onrender.com/api',
        reconnectInterval: 3000,
        maxReconnectAttempts: 5,
        syncInterval: 10000
    },

    // –î–∞–Ω–Ω—ã–µ
    data: {
        events: {},
        vacations: {},
        lastModified: 0,
        version: 1
    },

    // –î–µ–∂—É—Ä–Ω—ã–µ
    dutyPersons: [
        { id: 1, name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', color: '#2196F3' },
        { id: 2, name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω', color: '#4CAF50' },
        { id: 3, name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π', color: '#FF9800' }
    ],

    // –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (—Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –∫–æ–¥–µ)
    birthdays: [
        // –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –≤ 07:30
        {
            id: 1,
            name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω',
            date: '2025-01-09',
            type: 'congratulation',
            message: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @drmw1kr —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ'
        },
        {
            id: 2,
            name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π',
            date: '2025-02-13',
            type: 'congratulation',
            message: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @DPreobrazhensky —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ'
        },
        {
            id: 3,
            name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π',
            date: '2025-09-03',
            type: 'congratulation',
            message: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @i666nowornever —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ'
        },
        {
            id: 4,
            name: '–°–æ–ª–æ—Ö–∏–Ω –í—è—á–µ—Å–ª–∞–≤',
            date: '2025-11-07',
            type: 'congratulation',
            message: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @agent_instigator —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ'
        },
        {
            id: 5,
            name: '–¢–∏—Ö–æ–Ω–æ–≤ –ù–∏–∫–∏—Ç–∞',
            date: '2025-12-25',
            type: 'congratulation',
            message: 'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º @darkwellx —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéÇ'
        },
        // –ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ 10:00
        {
            id: 6,
            name: '–î—è–±–ª–æ–≤ –ê–ª–µ–∫—Å–µ–π',
            date: '2025-01-06',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –î—è–±–ª–æ–≤–∞ –ê.'
        },
        {
            id: 7,
            name: '–í–∏–Ω–∫–æ–≤—Å–∫–∏–π –ê–ª–µ–∫—Å–µ–π',
            date: '2025-01-28',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –í–∏–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ê.'
        },
        {
            id: 8,
            name: '–°–∏–≤–æ—Ä–∏–Ω –ú–∏—Ö–∞–∏–ª',
            date: '2025-02-09',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –°–∏–≤–æ—Ä–∏–Ω–∞ –ú.'
        },
        {
            id: 9,
            name: '–ö—É–Ω–∞–µ–≤ –ù–∏–∫–æ–ª–∞–π',
            date: '2025-05-24',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ö—É–Ω–∞–µ–≤–∞ –ù.'
        },
        {
            id: 10,
            name: '–ù—É—Ä–∏–∞—Ö–º–µ—Ç–æ–≤ –í–∞–¥–∏–º',
            date: '2025-07-09',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ù—É—Ä–∏–∞—Ö–º–µ—Ç–æ–≤–∞ –í.'
        },
        {
            id: 11,
            name: '–í–æ–ª–∫–æ–≤ –î–º–∏—Ç—Ä–∏–π',
            date: '2025-09-05',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –í–æ–ª–∫–æ–≤–∞ –î.'
        },
        {
            id: 12,
            name: '–ß—É–ø–µ—Ç–∫–∏–Ω –ò–≤–∞–Ω',
            date: '2025-10-28',
            type: 'notification',
            message: 'üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É –ß—É–ø–µ—Ç–∫–∏–Ω–∞ –ò.'
        }
    ],

    // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
    holidays: [
        '2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05', '2025-01-06', '2025-01-07', '2025-01-08',
        '2025-02-23', '2025-02-24', '2025-02-25',
        '2025-03-08', '2025-03-09', '2025-03-10',
        '2025-04-29', '2025-04-30', '2025-05-01', '2025-05-02',
        '2025-05-09', '2025-05-10', '2025-05-11',
        '2025-06-11', '2025-06-12', '2025-06-13',
        '2025-11-01', '2025-11-02', '2025-11-03',
        '2026-01-01', '2026-01-02', '2026-01-03', '2026-01-04', '2026-01-05', '2026-01-06', '2026-01-07', '2026-01-08',
        '2026-02-23', '2026-02-24', '2026-02-25',
        '2026-03-08', '2026-03-09', '2026-03-10',
        '2026-04-30', '2026-05-01', '2026-05-02', '2026-05-03',
        '2026-05-09', '2026-05-10', '2026-05-11',
        '2026-06-12', '2026-06-13', '2026-06-14',
        '2026-11-01', '2026-11-02', '2026-11-03'
    ],

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: {
        currentDate: new Date(),
        selectionMode: 'day',
        isOnline: false,
        isSyncing: false,
        retryCount: 0,
        lastSync: 0
    },

    // WebSocket
    ws: null,
    reconnectAttempts: 0,
    isConnected: false,
    httpSyncInterval: null,

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        console.log('üîÑ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadLocalData();
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.initRealtimeSync();
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
        this.scheduleBirthdays();
        console.log('‚úÖ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    // === –î–ù–ò –†–û–ñ–î–ï–ù–ò–Ø ===
    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
    scheduleBirthdays() {
        console.log('üéÇ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...');
        const now = new Date();
        const currentYear = now.getFullYear();
        
        this.birthdays.forEach(birthday => {
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É
            const birthDate = new Date(birthday.date);
            const birthdayThisYear = new Date(currentYear, birthDate.getMonth(), birthDate.getDate());

            // –ï—Å–ª–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–µ–ª –≤ —ç—Ç–æ–º –≥–æ–¥—É, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
            if (birthdayThisYear < now) {
                birthdayThisYear.setFullYear(currentYear + 1);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const sendTime = birthday.type === 'congratulation' ? '07:30' : '10:00';
            const [hours, minutes] = sendTime.split(':').map(Number);
            const sendDateTime = new Date(birthdayThisYear);
            sendDateTime.setHours(hours, minutes, 0, 0);

            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            this.scheduleBirthdayMessage(birthday, sendDateTime.getTime());
        });
    },

    // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–Ω–µ —Ä–æ–∂–¥–µ–Ω–∏—è
    scheduleBirthdayMessage(birthday, timestamp) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const existingMessages = MessageScheduler.getAllMessages();
        const alreadyScheduled = existingMessages.some(msg =>
            msg.eventData?.type === 'birthday' &&
            msg.eventData?.birthdayId === birthday.id &&
            new Date(msg.timestamp).getFullYear() === new Date(timestamp).getFullYear()
        );

        if (!alreadyScheduled) {
            MessageScheduler.scheduleMessage(
                timestamp,
                birthday.message,
                null,
                {
                    type: 'birthday',
                    birthdayId: birthday.id,
                    birthdayName: birthday.name,
                    birthdayType: birthday.type
                }
            );
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É
    getBirthdaysForDate(dateKey) {
        return this.birthdays.filter(birthday => {
            const birthDate = new Date(birthday.date);
            const checkDate = new Date(dateKey);
            return birthDate.getMonth() === checkDate.getMonth() &&
                   birthDate.getDate() === checkDate.getDate();
        });
    },

    // –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    getBirthdaysForCurrentMonth() {
        const currentMonth = this.state.currentDate.getMonth();
        const currentYear = this.state.currentDate.getFullYear();
        
        return this.birthdays.filter(birthday => {
            const birthDate = new Date(birthday.date);
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –≥–æ–¥—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const birthdayThisYear = new Date(currentYear, birthDate.getMonth(), birthDate.getDate());
            return birthdayThisYear.getMonth() === currentMonth;
        }).sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            const dateA = new Date(a.date);
            const dateB = new Date(b.date);
            return (dateA.getMonth() * 100 + dateA.getDate()) - (dateB.getMonth() * 100 + dateB.getDate());
        });
    },

    // === REAL-TIME –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    initRealtimeSync() {
        try {
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');
            this.ws = new WebSocket(this.syncConfig.wsUrl);
            
            this.ws.onopen = () => {
                console.log('‚úÖ WebSocket connected');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                this.state.isOnline = true;
                this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
            };

            this.ws.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    this.handleWebSocketMessage(message);
                } catch (error) {
                    console.error('‚ùå Error parsing WebSocket message:', error);
                }
            };

            this.ws.onclose = (event) => {
                console.log('üîå WebSocket disconnected:', event.code, event.reason);
                this.isConnected = false;
                this.state.isOnline = false;
                this.handleReconnection();
            };

            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket error:', error);
                this.isConnected = false;
                this.state.isOnline = false;
            };

        } catch (error) {
            console.error('‚ùå Error initializing WebSocket:', error);
            this.fallbackToHTTPSync();
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    handleWebSocketMessage(message) {
        switch (message.type) {
            case 'INIT_DATA':
                if (this.validateData(message.data)) {
                    this.handleRemoteUpdate(message.data, 'server');
                }
                break;
            case 'DATA_UPDATE':
                if (this.validateData(message.data)) {
                    this.handleRemoteUpdate(message.data, 'client');
                }
                break;
            case 'UPDATE_CONFIRMED':
                this.data.lastModified = message.lastModified;
                this.saveLocalData();
                this.updateSyncStatus('success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                break;
            case 'ERROR':
                console.error('‚ùå Server error:', message.message);
                this.updateSyncStatus('error', message.message);
                break;
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    handleRemoteUpdate(remoteData, source) {
        const localTimestamp = this.data.lastModified || 0;
        const remoteTimestamp = remoteData.lastModified || 0;

        if (remoteTimestamp > localTimestamp) {
            const hadChanges = JSON.stringify(this.data) !== JSON.stringify(remoteData);
            this.data = remoteData;
            this.saveLocalData();

            if (hadChanges) {
                this.updateSyncStatus('success', `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}`);
                if (document.getElementById('calendarGrid')) {
                    this.renderCalendar();
                }
            }
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
    sendUpdateToServer() {
        if (this.ws && this.isConnected && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'DATA_UPDATE',
                data: this.data,
                timestamp: Date.now()
            }));
            return true;
        }
        return false;
    },

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    handleReconnection() {
        if (this.reconnectAttempts < this.syncConfig.maxReconnectAttempts) {
            this.reconnectAttempts++;
            this.updateSyncStatus('syncing', '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            
            setTimeout(() => {
                this.initRealtimeSync();
            }, this.syncConfig.reconnectInterval);
        } else {
            this.fallbackToHTTPSync();
        }
    },

    // Fallback –Ω–∞ HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    fallbackToHTTPSync() {
        this.updateSyncStatus('warning', '–†–µ–∂–∏–º HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.startHTTPSyncInterval();
    },

    // HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async syncViaHTTP() {
        try {
            const response = await fetch(`${this.syncConfig.apiUrl}/calendar?t=${Date.now()}`);
            if (response.ok) {
                const result = await response.json();
                if (result.success && this.validateData(result.data)) {
                    this.handleRemoteUpdate(result.data, 'http');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå HTTP sync error:', error);
        }
        return false;
    },

    // HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async sendUpdateViaHTTP() {
        try {
            const response = await fetch(`${this.syncConfig.apiUrl}/calendar`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(this.data)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.data.lastModified = result.lastModified;
                    this.saveLocalData();
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå HTTP update error:', error);
        }
        return false;
    },

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startHTTPSyncInterval() {
        if (this.httpSyncInterval) {
            clearInterval(this.httpSyncInterval);
        }

        this.syncViaHTTP();
        this.httpSyncInterval = setInterval(async () => {
            await this.syncViaHTTP();
        }, this.syncConfig.syncInterval);
    },

    // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===
    // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadLocalData() {
        try {
            const saved = localStorage.getItem('calendarData');
            if (saved) {
                const localData = JSON.parse(saved);
                if (this.validateData(localData)) {
                    this.data = localData;
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }

        this.data = {
            events: {},
            vacations: {},
            lastModified: Date.now(),
            version: 1
        };
        return false;
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    saveLocalData() {
        try {
            localStorage.setItem('calendarData', JSON.stringify(this.data));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateData(data) {
        return data &&
            typeof data === 'object' &&
            typeof data.events === 'object' &&
            typeof data.vacations === 'object' &&
            typeof data.lastModified === 'number' &&
            typeof data.version === 'number';
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveData
    async saveData() {
        this.data.lastModified = Date.now();
        this.saveLocalData();

        let syncSuccess = this.sendUpdateToServer();
        if (!syncSuccess) {
            syncSuccess = await this.sendUpdateViaHTTP();
        }

        if (syncSuccess) {
            this.updateSyncStatus('success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } else {
            this.updateSyncStatus('warning', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        }
    },

    // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async manualSync() {
        if (this.state.isSyncing) {
            return false;
        }

        this.state.isSyncing = true;
        this.updateSyncStatus('syncing', '–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');

        try {
            let success = false;
            if (this.isConnected) {
                success = await this.syncViaHTTP();
            } else {
                success = await this.syncViaHTTP();
            }

            if (success) {
                this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            } else {
                this.updateSyncStatus('error', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            }
            return success;
        } finally {
            this.state.isSyncing = false;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncStatus(status, message) {
        const statusElement = document.getElementById('syncStatus');
        if (!statusElement) return;

        statusElement.className = `sync-status ${status}`;
        statusElement.innerHTML = `
            <i class="fas fa-${this.getSyncIcon(status)}"></i>
            ${message}
        `;

        this.updateSyncButton(status);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncButton(status) {
        const syncBtn = document.getElementById('manualSyncBtn');
        if (!syncBtn) return;

        syncBtn.classList.remove('syncing', 'success', 'error', 'warning', 'offline');
        if (status !== 'success') {
            syncBtn.classList.add(status);
        }

        const icon = syncBtn.querySelector('i');
        if (icon) {
            icon.className = `fas fa-${this.getSyncIcon(status)}`;
        }
    },

    getSyncIcon(status) {
        const icons = {
            syncing: 'sync-alt fa-spin',
            success: 'cloud-check',
            error: 'exclamation-triangle',
            warning: 'exclamation-circle',
            offline: 'wifi-slash'
        };
        return icons[status] || 'cloud';
    },

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ö–ê–õ–ï–ù–î–ê–†–Ø ===
    showCalendar() {
        Navigation.showPage('calendar');
    },

    loadCalendarPage() {
        this.renderCalendar();
        this.initializeCalendarHandlers();
        this.renderBirthdaysThisMonth();

        if (this.isConnected) {
            this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        } else {
            this.updateSyncStatus(this.state.isOnline ? 'success' : 'offline',
                this.state.isOnline ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    },

    renderCalendar() {
        const calendarElement = document.getElementById('calendarGrid');
        if (!calendarElement) return;

        const year = this.state.currentDate.getFullYear();
        const month = this.state.currentDate.getMonth();
        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];

        const titleElement = document.getElementById('calendarTitle');
        if (titleElement) {
            titleElement.textContent = `${monthNames[month]} ${year}`;
        }

        calendarElement.innerHTML = '';

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });

        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));

        const endDate = new Date(lastDay);
        endDate.setDate(endDate.getDate() + (7 - lastDay.getDay()) - (lastDay.getDay() === 0 ? 0 : 1));

        const today = new Date();
        let currentDate = new Date(startDate);

        for (let i = 0; i < 35; i++) {
            const dateKey = this.getDateKey(currentDate);
            const isCurrentMonth = currentDate.getMonth() === month;
            const isToday = currentDate.toDateString() === today.toDateString();

            const dayElement = this.createMainDayElement(
                new Date(currentDate),
                dateKey,
                currentDate.getDate(),
                isToday,
                !isCurrentMonth
            );

            calendarElement.appendChild(dayElement);
            currentDate.setDate(currentDate.getDate() + 1);
        }
    },

   // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
createMainDayElement(date, dateKey, dayNumber, isToday, isOtherMonth) {
    const dayElement = document.createElement('div');
    dayElement.className = 'calendar-day-main';
    
    if (isToday) {
        dayElement.classList.add('today');
    }
    if (isOtherMonth) {
        dayElement.classList.add('other-month');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey
    const correctDateKey = this.getDateKey(date);
    dayElement.dataset.date = correctDateKey;

    const isWeekend = date.getDay() === 0 || date.getDay() === 6;
    const isHoliday = this.holidays.includes(correctDateKey);
    if (isWeekend || isHoliday) dayElement.classList.add('holiday');

    const dayNumberElement = document.createElement('div');
    dayNumberElement.className = 'calendar-day-number-main';
    dayNumberElement.textContent = dayNumber;
    dayElement.appendChild(dayNumberElement);

    const eventsContainer = document.createElement('div');
    eventsContainer.className = 'calendar-day-events-main';

    // –î–µ–∂—É—Ä—Å—Ç–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey)
    if (this.data.events[correctDateKey]) {
        this.data.events[correctDateKey].forEach(event => {
            const eventElement = document.createElement('div');
            eventElement.className = 'calendar-event-main';
            eventElement.style.backgroundColor = event.color;
            eventElement.title = `${event.person}\n${event.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
            eventsContainer.appendChild(eventElement);
        });
    }

    // –û—Ç–ø—É—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey)
    if (this.data.vacations[correctDateKey]) {
        const vacationContainer = document.createElement('div');
        vacationContainer.className = 'calendar-vacation-container';
        
        this.data.vacations[correctDateKey].forEach(vacation => {
            const vacationElement = document.createElement('div');
            vacationElement.className = 'calendar-vacation-main';
            vacationElement.style.backgroundColor = vacation.color;
            vacationElement.title = `–û—Ç–ø—É—Å–∫: ${vacation.person}`;
            vacationContainer.appendChild(vacationElement);
        });
        
        eventsContainer.appendChild(vacationContainer);
    }

    // –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey)
    const birthdays = this.getBirthdaysForDate(correctDateKey);
    if (birthdays.length > 0) {
        const birthdayElement = document.createElement('div');
        birthdayElement.className = 'calendar-birthday-emoji';
        birthdayElement.textContent = 'üéâ';
        birthdayElement.title = `–î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthdays.map(b => b.name).join(', ')}`;
        eventsContainer.appendChild(birthdayElement);
    }

    dayElement.appendChild(eventsContainer);

    dayElement.addEventListener('click', () => {
        if (this.state.selectionMode === 'day') {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey
            this.openEventModal(correctDateKey);
        } else {
            this.handleWeekSelection(date);
        }
    });

    return dayElement;
},

    // –†–µ–Ω–¥–µ—Ä –±–ª–æ–∫–∞ —Å –¥–Ω—è–º–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ
    renderBirthdaysThisMonth() {
        const birthdaysContainer = document.getElementById('birthdaysThisMonth');
        if (!birthdaysContainer) return;

        const birthdays = this.getBirthdaysForCurrentMonth();
        
        if (birthdays.length === 0) {
            birthdaysContainer.innerHTML = `
                <div class="no-birthdays">
                    <i class="fas fa-birthday-cake"></i>
                    <p>–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ—Ç</p>
                </div>
            `;
            return;
        }

        let birthdaysHTML = '<div class="birthdays-list">';
        
        birthdays.forEach(birthday => {
            const birthDate = new Date(birthday.date);
            const formattedDate = birthDate.toLocaleDateString('ru-RU', { 
                day: 'numeric', 
                month: 'long' 
            });
            
            birthdaysHTML += `
                <div class="birthday-item">
                    <div class="birthday-date">${formattedDate}</div>
                    <div class="birthday-name">${birthday.name}</div>
                </div>
            `;
        });
        
        birthdaysHTML += '</div>';
        birthdaysContainer.innerHTML = birthdaysHTML;
    },

    initializeCalendarHandlers() {
        document.getElementById('calendarPrev')?.addEventListener('click', () => this.previousMonth());
        document.getElementById('calendarNext')?.addEventListener('click', () => this.nextMonth());
        document.getElementById('calendarToday')?.addEventListener('click', () => this.goToToday());
        document.getElementById('selectionModeBtn')?.addEventListener('click', () => this.toggleSelectionMode());
        document.getElementById('manualSyncBtn')?.addEventListener('click', () => this.manualSync());
    },

    toggleSelectionMode() {
        this.state.selectionMode = this.state.selectionMode === 'day' ? 'week' : 'day';
        const modeBtn = document.getElementById('selectionModeBtn');
        
        if (modeBtn) {
            modeBtn.innerHTML = this.state.selectionMode === 'day' ?
                '<i class="fas fa-calendar-day"></i> –†–µ–∂–∏–º: –î–µ–Ω—å' :
                '<i class="fas fa-calendar-week"></i> –†–µ–∂–∏–º: –ù–µ–¥–µ–ª—è';
        }
    },

    previousMonth() {
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() - 1);
        this.renderCalendar();
        this.renderBirthdaysThisMonth();
    },

    nextMonth() {
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() + 1);
        this.renderCalendar();
        this.renderBirthdaysThisMonth();
    },

    goToToday() {
        this.state.currentDate = new Date();
        this.renderCalendar();
        this.renderBirthdaysThisMonth();
    },

    // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ò –°–û–•–†–ê–ù–ï–ù–ò–ï ===
openEventModal(dateKey, weekDates = null) {
    const isWeekMode = weekDates !== null;
    
    let dateString;
    let actualDateKey = dateKey;
    
    if (isWeekMode) {
        // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const firstDate = this.parseDateKeyCorrect(weekDates[0]);
        const lastDate = this.parseDateKeyCorrect(weekDates[6]);
        dateString = `${firstDate.toLocaleDateString('ru-RU')} - ${lastDate.toLocaleDateString('ru-RU')}`;
    } else {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ dateKey –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
        const date = this.parseDateKeyCorrect(dateKey);
        dateString = date.toLocaleDateString('ru-RU');
        actualDateKey = this.getDateKey(date); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π dateKey
    }

    const modal = this.createModal(dateString, actualDateKey, weekDates);
    document.body.appendChild(modal);
    this.initializeModalHandlers(modal, actualDateKey, weekDates);
},

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ dateKey –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
parseDateKeyCorrect(dateKey) {
    // –†–∞–∑–±–∏–≤–∞–µ–º dateKey –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const [year, month, day] = dateKey.split('-').map(Number);
    return new Date(year, month - 1, day);
},

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ dateKey –∏–∑ –¥–∞—Ç—ã
getDateKey(date) {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
},

    createModal(dateString, dateKey, weekDates) {
        const modal = document.createElement('div');
        modal.className = 'calendar-modal-overlay';
        
        modal.innerHTML = `
            <div class="calendar-modal">
                <div class="calendar-modal-header">
                    <h3>${weekDates ? '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ –Ω–µ–¥–µ–ª—é' : '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞'} ${dateString}</h3>
                    <button class="calendar-modal-close">&times;</button>
                </div>
                <div class="calendar-modal-content">
                    <div class="modal-tabs">
                        <button class="tab-btn active" data-tab="duty">–î–µ–∂—É—Ä—Å—Ç–≤–æ</button>
                        <button class="tab-btn" data-tab="vacation">–û—Ç–ø—É—Å–∫</button>
                        <button class="tab-btn" data-tab="event">–°–æ–±—ã—Ç–∏–µ</button>
                    </div>
                    
                    <div class="tab-content" id="dutyTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="person-${person.id}"
                                            ${this.isPersonOnDuty(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="eventComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getEventComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="vacationTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="vacation-person-${person.id}"
                                            ${this.isPersonOnVacation(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="vacationComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="vacationComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getVacationComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="eventTab">
                        <div class="event-time-section">
                            <label for="eventTime">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                            <input type="time" id="eventTime" value="09:00">
                        </div>
                        <div class="comment-section">
                            <label for="eventMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:</label>
                            <textarea id="eventMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç..."></textarea>
                        </div>
                        <div class="notification-info">
                            <i class="fas fa-info-circle"></i>
                            –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                        </div>
                    </div>
                </div>
                <div class="calendar-modal-actions">
                    <button class="btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;

        return modal;
    },

    initializeModalHandlers(modal, dateKey, weekDates) {
        const tabBtns = modal.querySelectorAll('.tab-btn');
        const tabContents = modal.querySelectorAll('.tab-content');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                tabBtns.forEach(b => b.classList.remove('active'));
                tabContents.forEach(c => c.classList.add('hidden'));
                
                btn.classList.add('active');
                modal.querySelector(`#${btn.dataset.tab}Tab`).classList.remove('hidden');
            });
        });

        const closeModal = () => document.body.removeChild(modal);
        
        modal.querySelector('.calendar-modal-close').addEventListener('click', closeModal);
        modal.querySelector('.btn-cancel').addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });

        modal.querySelector('.btn-save').addEventListener('click', () => {
            const activeTab = modal.querySelector('.tab-btn.active').dataset.tab;
            const datesToSave = weekDates || [dateKey];

            if (activeTab === 'duty') {
                this.saveDutyEvent(datesToSave);
            } else if (activeTab === 'vacation') {
                this.saveVacationEvent(datesToSave);
            } else if (activeTab === 'event') {
                this.saveChatEvent(datesToSave);
            }

            closeModal();
            this.renderCalendar();
        });
    },

    saveDutyEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('.duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('eventComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.events[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment
                }));
            } else {
                delete this.data.events[date];
            }
        });

        this.saveData();
    },

    saveVacationEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('#vacationTab .duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('vacation-person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('vacationComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.vacations[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment,
                    type: 'vacation'
                }));
            } else {
                delete this.data.vacations[date];
            }
        });

        this.saveData();
    },

    saveChatEvent(datesToSave) {
        const eventTime = document.getElementById('eventTime')?.value;
        const eventMessage = document.getElementById('eventMessage')?.value.trim();

        if (!eventMessage) {
            DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
            return;
        }

        if (!eventTime) {
            DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
            return;
        }

        datesToSave.forEach(date => {
            const eventDateTime = this.createDateTime(date, eventTime);
            if (!eventDateTime) {
                DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏', 'error');
                return;
            }

            this.scheduleTelegramMessage(eventDateTime, eventMessage);
        });

        DialogService.showMessage('‚úÖ –£—Å–ø–µ—Ö', '–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', 'success');
    },

    createDateTime(dateString, timeString) {
    try {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
        const date = this.parseDateKeyCorrect(dateString);
        
        if (isNaN(date.getTime())) {
            return null;
        }

        const [hours, minutes] = timeString.split(':').map(Number);
        if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
            return null;
        }

        date.setHours(hours, minutes, 0, 0);
        return date.getTime();
    } catch (error) {
        return null;
    }
},

    scheduleTelegramMessage(eventTimestamp, message, chatId = null) {
        const now = Date.now();
        if (eventTimestamp <= now) {
            DialogService.showMessage(
                '‚ùå –û—à–∏–±–∫–∞',
                '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.',
                'error'
            );
            return null;
        }

        if (!message || message.trim().length === 0) {
            DialogService.showMessage(
                '‚ùå –û—à–∏–±–∫–∞',
                '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.',
                'error'
            );
            return null;
        }

        try {
            const messageId = MessageScheduler.scheduleMessage(
                eventTimestamp,
                message.trim(),
                chatId,
                {
                    type: 'calendar_event',
                    dateTime: new Date(eventTimestamp).toISOString(),
                    source: 'calendar'
                }
            );

            return messageId;
        } catch (error) {
            DialogService.showMessage(
                '‚ùå –û—à–∏–±–∫–∞',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                'error'
            );
            return null;
        }
    },

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
isPersonOnDuty(dateKey, personId) {
    return this.data.events[dateKey]?.some(event => event.id === personId);
},

isPersonOnVacation(dateKey, personId) {
    return this.data.vacations[dateKey]?.some(vacation => vacation.id === personId);
},

getEventComment(dateKey) {
    return this.data.events[dateKey]?.[0]?.comment || '';
},

getVacationComment(dateKey) {
    return this.data.vacations[dateKey]?.[0]?.comment || '';
},

// –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ dateKey –∏–∑ –¥–∞—Ç—ã
getDateKey(date) {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
},

// –ù–û–í–´–ô –ú–ï–¢–û–î: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ dateKey –±–µ–∑ –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
parseDateKeyCorrect(dateKey) {
    // –†–∞–∑–±–∏–≤–∞–µ–º dateKey –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const [year, month, day] = dateKey.split('-').map(Number);
    return new Date(year, month - 1, day);
},

handleWeekSelection(selectedDate) {
    const weekDates = this.getWeekDates(selectedDate);
    const dateKeys = weekDates.map(date => this.getDateKey(date));
    this.openEventModal(dateKeys[0], dateKeys);
},

getWeekDates(date) {
    const dates = [];
    const dayOfWeek = date.getDay();
    const startDate = new Date(date);
    startDate.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));

    for (let i = 0; i < 7; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        dates.push(currentDate);
    }

    return dates;
},

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
    showScheduledView() {
        Navigation.showPage('scheduled-view');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (typeof CalendarManager !== 'undefined' && CalendarManager.init) {
        CalendarManager.init();
    }
});