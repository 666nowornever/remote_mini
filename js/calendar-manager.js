// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–µ–∂—É—Ä—Å—Ç–≤ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
const CalendarManager = {
    // –î–∞–Ω–Ω—ã–µ
    data: {
        events: {},
        vacations: {},
        lastModified: 0,
        version: 1
    },

    // –î–µ–∂—É—Ä–Ω—ã–µ
    dutyPersons: [
        { id: 1, name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', color: '#2196F3' },
        { id: 2, name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω', color: '#4CAF50' },
        { id: 3, name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π', color: '#FF9800' }
    ],

    // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ 2024
    holidays: [
        '2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05', '2025-01-06', '2025-01-07', '2025-01-08',
'2025-02-22', '2025-02-23', '2025-02-24',
'2025-03-08', '2025-03-09', '2025-03-10',
'2025-04-28', '2025-04-29', '2025-04-30', '2025-05-01', '2025-05-02', '2025-05-03', '2025-05-09', '2025-05-10', '2025-05-11',
'2025-06-11', '2025-06-12', '2025-06-13', '2025-06-14',
'2025-11-03', '2025-11-04', '2026-01-01', '2026-01-02', '2026-01-03', '2026-01-04', '2026-01-05', '2026-01-06', '2026-01-07', '2026-01-08', '2026-01-09',
'2026-02-21', '2026-02-22', '2026-02-23',
'2026-03-07', '2026-03-08', '2026-03-09',
'2026-04-30', '2026-05-01', '2026-05-02', '2026-05-03', '2026-05-04', '2026-05-09', '2026-05-10', '2026-05-11',
'2026-06-11', '2026-06-12', '2026-06-13', '2026-06-14',
'2026-11-03', '2026-11-04'
    ],

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: {
        currentDate: new Date(),
        selectionMode: 'day'
    },

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        console.log('üìÖ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        this.loadLocalData();
        console.log('‚úÖ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    // === –ó–ê–ì–†–£–ó–ö–ê –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• ===
    loadLocalData() {
        try {
            const saved = localStorage.getItem('calendarData');
            if (saved) {
                const localData = JSON.parse(saved);
                if (this.validateData(localData)) {
                    this.data = localData;
                    console.log('üìÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        
        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        this.data = {
            events: {},
            vacations: {},
            lastModified: Date.now(),
            version: 1
        };
        return false;
    },

    saveLocalData() {
        try {
            this.data.lastModified = Date.now();
            localStorage.setItem('calendarData', JSON.stringify(this.data));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    },

    validateData(data) {
        return data && 
               typeof data === 'object' &&
               typeof data.events === 'object' &&
               typeof data.vacations === 'object' &&
               typeof data.lastModified === 'number';
    },

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ö–ê–õ–ï–ù–î–ê–†–Ø ===
    showCalendar() {
        Navigation.showPage('calendar');
    },

    loadCalendarPage() {
        this.renderCalendar();
        this.initializeCalendarHandlers();
    },

    renderCalendar() {
        const calendarElement = document.getElementById('calendarGrid');
        if (!calendarElement) return;

        const year = this.state.currentDate.getFullYear();
        const month = this.state.currentDate.getMonth();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
        const titleElement = document.getElementById('calendarTitle');
        if (titleElement) {
            titleElement.textContent = `${monthNames[month]} ${year}`;
        }

        // –û—á–∏—â–∞–µ–º —Å–µ—Ç–∫—É
        calendarElement.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        const daysInMonth = lastDay.getDate();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        const startingDay = firstDay.getDay();
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0)
        const startingDayAdjusted = startingDay === 0 ? 6 : startingDay - 1;

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        const prevMonthLastDay = new Date(year, month, 0).getDate();
        for (let i = startingDayAdjusted - 1; i >= 0; i--) {
            const day = prevMonthLastDay - i;
            const date = new Date(year, month - 1, day);
            const dateKey = this.getDateKey(date);
            const dayElement = this.createDayElement(date, dateKey, day, true);
            calendarElement.appendChild(dayElement);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dateKey = this.getDateKey(date);
            const dayElement = this.createDayElement(date, dateKey, day, false);
            calendarElement.appendChild(dayElement);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫—É (6 —Å—Ç—Ä–æ–∫ √ó 7 –¥–Ω–µ–π = 42 —è—á–µ–π–∫–∏)
        const totalCells = 42;
        const totalDaysDisplayed = startingDayAdjusted + daysInMonth;
        const nextMonthDays = totalCells - totalDaysDisplayed;
        
        for (let day = 1; day <= nextMonthDays; day++) {
            const date = new Date(year, month + 1, day);
            const dateKey = this.getDateKey(date);
            const dayElement = this.createDayElement(date, dateKey, day, true);
            calendarElement.appendChild(dayElement);
        }
    },

    createDayElement(date, dateKey, dayNumber, isOtherMonth) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day';
        if (isOtherMonth) {
            dayElement.classList.add('other-month');
        }
        dayElement.dataset.date = dateKey;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
        const isWeekend = date.getDay() === 0 || date.getDay() === 6;
        const isHoliday = this.holidays.includes(dateKey);
        if (isWeekend || isHoliday) {
            dayElement.classList.add('holiday');
        }

        // –ù–æ–º–µ—Ä –¥–Ω—è
        const dayNumberElement = document.createElement('div');
        dayNumberElement.className = 'calendar-day-number';
        dayNumberElement.textContent = dayNumber;
        dayElement.appendChild(dayNumberElement);

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        const eventsContainer = document.createElement('div');
        eventsContainer.className = 'calendar-day-events';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if (!isOtherMonth) {
            // –î–µ–∂—É—Ä—Å—Ç–≤–∞
            if (this.data.events[dateKey]) {
                this.data.events[dateKey].forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = 'calendar-event';
                    eventElement.style.backgroundColor = event.color;
                    eventElement.title = `${event.person}\n${event.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                    eventsContainer.appendChild(eventElement);
                });
            }

            // –û—Ç–ø—É—Å–∫–∞
            if (this.data.vacations[dateKey]) {
                const vacationContainer = document.createElement('div');
                vacationContainer.className = 'calendar-vacation-container';
                
                this.data.vacations[dateKey].forEach(vacation => {
                    const vacationElement = document.createElement('div');
                    vacationElement.className = 'calendar-vacation';
                    vacationElement.style.backgroundColor = vacation.color;
                    vacationElement.title = `–û—Ç–ø—É—Å–∫: ${vacation.person}`;
                    vacationContainer.appendChild(vacationElement);
                });
                
                eventsContainer.appendChild(vacationContainer);
            }
        }

        dayElement.appendChild(eventsContainer);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–Ω–µ–π —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        if (!isOtherMonth) {
            dayElement.addEventListener('click', () => {
                if (this.state.selectionMode === 'day') {
                    this.openEventModal(dateKey);
                } else {
                    this.handleWeekSelection(date);
                }
            });
        } else {
            dayElement.style.cursor = 'default';
        }

        return dayElement;
    },

    // –í —Ä–∞–∑–¥–µ–ª–µ –º–µ—Ç–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º:

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ===
initializeCalendarHandlers() {
    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    document.getElementById('calendarPrev')?.addEventListener('click', () => this.previousMonth());
    document.getElementById('calendarNext')?.addEventListener('click', () => this.nextMonth());
    
    // –ö–Ω–æ–ø–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
    document.getElementById('selectionModeBtn')?.addEventListener('click', () => this.toggleSelectionMode());
},

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ (–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—è)
toggleSelectionMode() {
    this.state.selectionMode = this.state.selectionMode === 'day' ? 'week' : 'day';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    const modeBtn = document.getElementById('selectionModeBtn');
    if (modeBtn) {
        const icon = this.state.selectionMode === 'day' ? 'fa-calendar-day' : 'fa-calendar-week';
        const text = this.state.selectionMode === 'day' ? '–†–µ–∂–∏–º: –î–µ–Ω—å' : '–†–µ–∂–∏–º: –ù–µ–¥–µ–ª—è';
        
        modeBtn.innerHTML = `<i class="fas ${icon}"></i> ${text}`;
    }
    
    console.log(`üìÖ –†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${this.state.selectionMode}`);
},

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
previousMonth() { 
    this.state.currentDate.setMonth(this.state.currentDate.getMonth() - 1); 
    this.renderCalendar(); 
    console.log('üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É');
},

nextMonth() { 
    this.state.currentDate.setMonth(this.state.currentDate.getMonth() + 1); 
    this.renderCalendar(); 
    console.log('üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É');
},

goToToday() { 
    this.state.currentDate = new Date(); 
    this.renderCalendar(); 
    console.log('üìÖ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É');
},

    // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û ===
    openEventModal(dateKey, weekDates = null) {
        const isWeekMode = weekDates !== null;
        const date = this.parseDateKey(dateKey);
        
        let dateString;
        if (isWeekMode) {
            const firstDate = this.parseDateKey(weekDates[0]);
            const lastDate = this.parseDateKey(weekDates[6]);
            dateString = `${firstDate.toLocaleDateString('ru-RU')} - ${lastDate.toLocaleDateString('ru-RU')}`;
        } else {
            dateString = date.toLocaleDateString('ru-RU');
        }

        const modal = this.createModal(dateString, dateKey, weekDates);
        document.body.appendChild(modal);
        this.initializeModalHandlers(modal, dateKey, weekDates);
    },

    createModal(dateString, dateKey, weekDates) {
        const modal = document.createElement('div');
        modal.className = 'calendar-modal-overlay';
        modal.innerHTML = `
            <div class="calendar-modal">
                <div class="calendar-modal-header">
                    <h3>${weekDates ? '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ –Ω–µ–¥–µ–ª—é' : '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞'} ${dateString}</h3>
                    <button class="calendar-modal-close">&times;</button>
                </div>
                <div class="calendar-modal-content">
                    <div class="modal-tabs">
                        <button class="tab-btn active" data-tab="duty">–î–µ–∂—É—Ä—Å—Ç–≤–æ</button>
                        <button class="tab-btn" data-tab="vacation">–û—Ç–ø—É—Å–∫</button>
                    </div>
                    
                    <div class="tab-content" id="dutyTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="person-${person.id}" 
                                               ${this.isPersonOnDuty(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="eventComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getEventComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="vacationTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="vacation-person-${person.id}" 
                                               ${this.isPersonOnVacation(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="vacationComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="vacationComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getVacationComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                </div>
                <div class="calendar-modal-actions">
                    <button class="btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;
        return modal;
    },

    initializeModalHandlers(modal, dateKey, weekDates) {
        const tabBtns = modal.querySelectorAll('.tab-btn');
        const tabContents = modal.querySelectorAll('.tab-content');
        
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                tabBtns.forEach(b => b.classList.remove('active'));
                tabContents.forEach(c => c.classList.add('hidden'));
                btn.classList.add('active');
                modal.querySelector(`#${btn.dataset.tab}Tab`).classList.remove('hidden');
            });
        });

        const closeModal = () => document.body.removeChild(modal);
        modal.querySelector('.calendar-modal-close').addEventListener('click', closeModal);
        modal.querySelector('.btn-cancel').addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => { 
            if (e.target === modal) closeModal(); 
        });

        modal.querySelector('.btn-save').addEventListener('click', () => {
            const activeTab = modal.querySelector('.tab-btn.active').dataset.tab;
            const datesToSave = weekDates || [dateKey];

            if (activeTab === 'duty') {
                this.saveDutyEvent(datesToSave);
            } else if (activeTab === 'vacation') {
                this.saveVacationEvent(datesToSave);
            }

            closeModal();
            this.renderCalendar();
        });
    },

    saveDutyEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('.duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('eventComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.events[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment
                }));
            } else {
                delete this.data.events[date];
            }
        });

        this.saveLocalData();
    },

    saveVacationEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('#vacationTab .duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('vacation-person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('vacationComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.vacations[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment,
                    type: 'vacation'
                }));
            } else {
                delete this.data.vacations[date];
            }
        });

        this.saveLocalData();
    },

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
    isPersonOnDuty(dateKey, personId) {
        return this.data.events[dateKey]?.some(event => event.id === personId);
    },

    isPersonOnVacation(dateKey, personId) {
        return this.data.vacations[dateKey]?.some(vacation => vacation.id === personId);
    },

    getEventComment(dateKey) {
        return this.data.events[dateKey]?.[0]?.comment || '';
    },

    getVacationComment(dateKey) {
        return this.data.vacations[dateKey]?.[0]?.comment || '';
    },

    getDateKey(date) {
        return date.toISOString().split('T')[0];
    },

    parseDateKey(dateKey) {
        return new Date(dateKey + 'T00:00:00');
    },

    handleWeekSelection(selectedDate) {
        const weekDates = this.getWeekDates(selectedDate);
        const dateKeys = weekDates.map(date => this.getDateKey(date));
        this.openEventModal(dateKeys[0], dateKeys);
    },

    getWeekDates(date) {
        const dates = [];
        const dayOfWeek = date.getDay();
        const startDate = new Date(date);
        startDate.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
        
        for (let i = 0; i < 7; i++) {
            const currentDate = new Date(startDate);
            currentDate.setDate(startDate.getDate() + i);
            dates.push(currentDate);
        }
        
        return dates;
    },

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
    previousMonth() { 
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() - 1); 
        this.renderCalendar(); 
    },
    
    nextMonth() { 
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() + 1); 
        this.renderCalendar(); 
    },
    
    goToToday() { 
        this.state.currentDate = new Date(); 
        this.renderCalendar(); 
    },

    toggleSelectionMode() {
        this.state.selectionMode = this.state.selectionMode === 'day' ? 'week' : 'day';
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (typeof CalendarManager !== 'undefined' && CalendarManager.init) {
        CalendarManager.init();
    }
});