// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–µ–∂—É—Ä—Å—Ç–≤ —Å real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
const CalendarManager = {
    // === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===
    syncConfig: {
        // URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render.com (–ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ô –ü–û–°–õ–ï –î–ï–ü–õ–û–Ø)
        wsUrl: 'wss://remote-api-calendar.onrender.com/ws',
        apiUrl: 'https://remote-api-calendar.onrender.com/api',
        reconnectInterval: 3000,
        maxReconnectAttempts: 5,
        syncInterval: 10000 // HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫
    },

    // –î–∞–Ω–Ω—ã–µ
    data: {
        events: {},
        vacations: {},
        lastModified: 0,
        version: 1
    },

    // –î–µ–∂—É—Ä–Ω—ã–µ
    dutyPersons: [
        { id: 1, name: '–ö—Ä–µ–º–Ω–µ–≤ –ê–Ω–¥—Ä–µ–π', color: '#2196F3' },
        { id: 2, name: '–í–∞—Å–∏–ª—å–µ–≤ –ò–≤–∞–Ω', color: '#4CAF50' },
        { id: 3, name: '–ü—Ä–µ–æ–±—Ä–∞–∂–µ–Ω—Å–∫–∏–π –î–º–∏—Ç—Ä–∏–π', color: '#FF9800' }
    ],

    // –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏
    holidays: [
        // –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã (8 –¥–Ω–µ–π)
        '2025-01-01', '2025-01-02', '2025-01-03', '2025-01-04', '2025-01-05', '2025-01-06', '2025-01-07', '2025-01-08',
        // –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞ (3 –¥–Ω—è)
        '2025-02-23', '2025-02-24', '2025-02-25',
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å (3 –¥–Ω—è)
        '2025-03-08', '2025-03-09', '2025-03-10',
        // –ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞ (4 –¥–Ω—è)
        '2025-04-29', '2025-04-30', '2025-05-01', '2025-05-02',
        // –î–µ–Ω—å –ü–æ–±–µ–¥—ã (3 –¥–Ω—è)
        '2025-05-09', '2025-05-10', '2025-05-11',
        // –î–µ–Ω—å –†–æ—Å—Å–∏–∏ (3 –¥–Ω—è)
        '2025-06-11', '2025-06-12', '2025-06-13',
        // –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞ (3 –¥–Ω—è)
        '2025-11-01', '2025-11-02', '2025-11-03',
        // –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã (8 –¥–Ω–µ–π)
        '2026-01-01', '2026-01-02', '2026-01-03', '2026-01-04', '2026-01-05', '2026-01-06', '2026-01-07', '2026-01-08',
        // –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞ (3 –¥–Ω—è)
        '2026-02-23', '2026-02-24', '2026-02-25',
        // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å (3 –¥–Ω—è)
        '2026-03-08', '2026-03-09', '2026-03-10',
        // –ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞ (4 –¥–Ω—è)
        '2026-04-30', '2026-05-01', '2026-05-02', '2026-05-03',
        // –î–µ–Ω—å –ü–æ–±–µ–¥—ã (3 –¥–Ω—è)
        '2026-05-09', '2026-05-10', '2026-05-11',
        // –î–µ–Ω—å –†–æ—Å—Å–∏–∏ (3 –¥–Ω—è)
        '2026-06-12', '2026-06-13', '2026-06-14',
        // –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞ (3 –¥–Ω—è)
        '2026-11-01', '2026-11-02', '2026-11-03'
    ],

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    state: {
        currentDate: new Date(),
        selectionMode: 'day',
        isOnline: false,
        isSyncing: false,
        retryCount: 0,
        lastSync: 0
    },

    // WebSocket
    ws: null,
    reconnectAttempts: 0,
    isConnected: false,
    httpSyncInterval: null,

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    async init() {
        console.log('üîÑ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.loadLocalData();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.initRealtimeSync();
        
        console.log('‚úÖ CalendarManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    },

    // === REAL-TIME –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ===

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    initRealtimeSync() {
        try {
            console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket...');
            this.ws = new WebSocket(this.syncConfig.wsUrl);
            
            this.ws.onopen = () => {
                console.log('‚úÖ WebSocket connected');
                this.isConnected = true;
                this.reconnectAttempts = 0;
                this.state.isOnline = true;
                this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
                this.showConnectionStatus('connected');
            };

            this.ws.onmessage = (event) => {
                try {
                    const message = JSON.parse(event.data);
                    this.handleWebSocketMessage(message);
                } catch (error) {
                    console.error('‚ùå Error parsing WebSocket message:', error);
                }
            };

            this.ws.onclose = (event) => {
                console.log('üîå WebSocket disconnected:', event.code, event.reason);
                this.isConnected = false;
                this.state.isOnline = false;
                this.showConnectionStatus('disconnected');
                this.handleReconnection();
            };

            this.ws.onerror = (error) => {
                console.error('‚ùå WebSocket error:', error);
                this.isConnected = false;
                this.state.isOnline = false;
                this.showConnectionStatus('error');
            };

        } catch (error) {
            console.error('‚ùå Error initializing WebSocket:', error);
            this.fallbackToHTTPSync();
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    handleWebSocketMessage(message) {
        console.log('üì® WebSocket message:', message.type);

        switch (message.type) {
            case 'INIT_DATA':
                // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                if (this.validateData(message.data)) {
                    this.handleRemoteUpdate(message.data, 'server');
                }
                break;

            case 'DATA_UPDATE':
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if (this.validateData(message.data)) {
                    this.handleRemoteUpdate(message.data, 'client');
                }
                break;

            case 'UPDATE_CONFIRMED':
                // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                this.data.lastModified = message.lastModified;
                this.saveLocalData();
                console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Å–µ—Ä–≤–µ—Ä–æ–º');
                this.updateSyncStatus('success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
                break;

            case 'HEARTBEAT':
                console.log('üíì Heartbeat, clients:', message.clients);
                break;

            case 'PONG':
                break;

            case 'ERROR':
                console.error('‚ùå Server error:', message.message);
                this.updateSyncStatus('error', message.message);
                break;
        }
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    handleRemoteUpdate(remoteData, source) {
        const localTimestamp = this.data.lastModified || 0;
        const remoteTimestamp = remoteData.lastModified || 0;

        // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–µ–µ
        if (remoteTimestamp > localTimestamp) {
            const hadChanges = JSON.stringify(this.data) !== JSON.stringify(remoteData);
            
            this.data = remoteData;
            this.saveLocalData();
            
            if (hadChanges) {
                console.log(`üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Ç ${source}`);
                this.updateSyncStatus('success', `–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}`);
                
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                if (document.getElementById('calendarGrid')) {
                    this.renderCalendar();
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (source === 'client') {
                    this.showChangeNotification();
                }
            }
        } else {
            console.log('üìä –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω–µ–µ');
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ WebSocket
    sendUpdateToServer() {
        if (this.ws && this.isConnected && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({
                type: 'DATA_UPDATE',
                data: this.data,
                timestamp: Date.now()
            }));
            console.log('üì§ Sent update via WebSocket');
            return true;
        }
        return false;
    },

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    handleReconnection() {
        if (this.reconnectAttempts < this.syncConfig.maxReconnectAttempts) {
            this.reconnectAttempts++;
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.syncConfig.maxReconnectAttempts}`);
            
            this.updateSyncStatus('syncing', '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
            this.showConnectionStatus('reconnecting');
            
            setTimeout(() => {
                this.initRealtimeSync();
            }, this.syncConfig.reconnectInterval);
        } else {
            console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.fallbackToHTTPSync();
        }
    },

    // Fallback –Ω–∞ HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    fallbackToHTTPSync() {
        console.log('üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        this.updateSyncStatus('warning', '–†–µ–∂–∏–º HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        this.showConnectionStatus('http');
        this.startHTTPSyncInterval();
    },

    // HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async syncViaHTTP() {
        try {
            console.log('üì° HTTP sync request...');
            const response = await fetch(`${this.syncConfig.apiUrl}/calendar?t=${Date.now()}`);
            
            if (response.ok) {
                const result = await response.json();
                if (result.success && this.validateData(result.data)) {
                    this.handleRemoteUpdate(result.data, 'http');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå HTTP sync error:', error);
        }
        return false;
    },

    // HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async sendUpdateViaHTTP() {
        try {
            console.log('üì§ HTTP update request...');
            const response = await fetch(`${this.syncConfig.apiUrl}/calendar`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(this.data)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.data.lastModified = result.lastModified;
                    this.saveLocalData();
                    console.log('‚úÖ HTTP update successful');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå HTTP update error:', error);
        }
        return false;
    },

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    startHTTPSyncInterval() {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.httpSyncInterval) {
            clearInterval(this.httpSyncInterval);
        }
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
        this.syncViaHTTP();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.httpSyncInterval = setInterval(async () => {
            await this.syncViaHTTP();
        }, this.syncConfig.syncInterval);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    showConnectionStatus(status) {
        // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
        let statusElement = document.getElementById('connectionStatus');
        if (!statusElement) {
            statusElement = document.createElement('div');
            statusElement.id = 'connectionStatus';
            statusElement.style.cssText = `
                position: fixed;
                top: 10px;
                left: 10px;
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 12px;
                z-index: 1000;
                background: rgba(0,0,0,0.8);
                color: white;
                font-weight: 500;
            `;
            document.body.appendChild(statusElement);
        }

        const statusConfig = {
            connected: { text: 'üü¢ Online', color: '#4CAF50' },
            disconnected: { text: 'üî¥ Offline', color: '#f44336' },
            reconnecting: { text: 'üü° Reconnecting...', color: '#ff9800' },
            error: { text: 'üî¥ Error', color: '#f44336' },
            http: { text: 'üü† HTTP Mode', color: '#ff9800' }
        };

        const config = statusConfig[status] || statusConfig.disconnected;
        statusElement.textContent = config.text;
        statusElement.style.background = config.color;
    },

    // === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ===

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadLocalData() {
        try {
            const saved = localStorage.getItem('calendarData');
            if (saved) {
                const localData = JSON.parse(saved);
                if (this.validateData(localData)) {
                    this.data = localData;
                    console.log('üìÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
                    return true;
                }
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        
        // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
        this.data = {
            events: {},
            vacations: {},
            lastModified: Date.now(),
            version: 1
        };
        return false;
    },

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    saveLocalData() {
        try {
            localStorage.setItem('calendarData', JSON.stringify(this.data));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    },

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    validateData(data) {
        return data && 
               typeof data === 'object' &&
               typeof data.events === 'object' &&
               typeof data.vacations === 'object' &&
               typeof data.lastModified === 'number' &&
               typeof data.version === 'number';
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ saveData
    async saveData() {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        this.data.lastModified = Date.now();
        this.saveLocalData();
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ WebSocket
        let syncSuccess = this.sendUpdateToServer();
        
        // –ï—Å–ª–∏ WebSocket –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP
        if (!syncSuccess) {
            syncSuccess = await this.sendUpdateViaHTTP();
        }
        
        if (syncSuccess) {
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            this.updateSyncStatus('success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ');
        } else {
            console.log('üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (–æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)');
            this.updateSyncStatus('warning', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ');
        }
    },

    // –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    async manualSync() {
        if (this.state.isSyncing) {
            console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...');
            return false;
        }

        this.state.isSyncing = true;
        this.updateSyncStatus('syncing', '–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...');

        try {
            let success = false;
            
            if (this.isConnected) {
                // –ü—Ä–æ–±—É–µ–º WebSocket —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                success = await this.syncViaHTTP(); // HTTP –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            } else {
                // –¢–æ–ª—å–∫–æ HTTP —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                success = await this.syncViaHTTP();
            }

            if (success) {
                this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            } else {
                this.updateSyncStatus('error', '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
            }

            return success;
        } finally {
            this.state.isSyncing = false;
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncStatus(status, message) {
        const statusElement = document.getElementById('syncStatus');
        if (!statusElement) return;

        statusElement.className = `sync-status ${status}`;
        statusElement.innerHTML = `
            <i class="fas fa-${this.getSyncIcon(status)}"></i>
            ${message}
        `;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.updateSyncButton(status);
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ –∫–Ω–æ–ø–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    updateSyncButton(status) {
        const syncBtn = document.getElementById('manualSyncBtn');
        if (!syncBtn) return;

        syncBtn.classList.remove('syncing', 'success', 'error', 'warning', 'offline');
        
        if (status !== 'success') {
            syncBtn.classList.add(status);
        }

        const icon = syncBtn.querySelector('i');
        if (icon) {
            icon.className = `fas fa-${this.getSyncIcon(status)}`;
        }
    },

    getSyncIcon(status) {
        const icons = {
            syncing: 'sync-alt fa-spin',
            success: 'cloud-check',
            error: 'exclamation-triangle',
            warning: 'exclamation-circle',
            offline: 'wifi-slash'
        };
        return icons[status] || 'cloud';
    },

    // === –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –ö–ê–õ–ï–ù–î–ê–†–Ø ===
    showCalendar() {
        Navigation.showPage('calendar');
    },

    loadCalendarPage() {
        this.renderCalendar();
        this.initializeCalendarHandlers();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (this.isConnected) {
            this.updateSyncStatus('success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        } else {
            this.updateSyncStatus(this.state.isOnline ? 'success' : 'offline', 
                               this.state.isOnline ? '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ' : '–õ–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    },

    renderCalendar: function() {
        const calendarElement = document.getElementById('calendarGrid');
        if (!calendarElement) return;

        const year = this.state.currentDate.getFullYear();
        const month = this.state.currentDate.getMonth();

        const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
        const titleElement = document.getElementById('calendarTitle');
        if (titleElement) {
            titleElement.textContent = `${monthNames[month]} ${year}`;
        }

        calendarElement.innerHTML = '';

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        const daysOfWeek = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
        daysOfWeek.forEach(day => {
            const dayHeader = document.createElement('div');
            dayHeader.className = 'calendar-day-header';
            dayHeader.textContent = day;
            calendarElement.appendChild(dayHeader);
        });

        const firstDay = new Date(year, month, 1);
        const lastDay = new Date(year, month + 1, 0);
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
        const startDate = new Date(firstDay);
        startDate.setDate(startDate.getDate() - firstDay.getDay() + (firstDay.getDay() === 0 ? -6 : 1));
        
        // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞)
        const endDate = new Date(lastDay);
        endDate.setDate(endDate.getDate() + (7 - lastDay.getDay()) - (lastDay.getDay() === 0 ? 0 : 1));
        
        const today = new Date();
        let currentDate = new Date(startDate);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –≤—Å–µ 35 —è—á–µ–π–∫–∏ (5 –Ω–µ–¥–µ–ª—å)
        for (let i = 0; i < 35; i++) {
            const dateKey = this.getDateKey(currentDate);
            const isCurrentMonth = currentDate.getMonth() === month;
            const isToday = currentDate.toDateString() === today.toDateString();
            
            const dayElement = this.createMainDayElement(
                new Date(currentDate), 
                dateKey, 
                currentDate.getDate(), 
                isToday, 
                !isCurrentMonth
            );
            
            calendarElement.appendChild(dayElement);
            currentDate.setDate(currentDate.getDate() + 1);
        }
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–Ω—è –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    createMainDayElement: function(date, dateKey, dayNumber, isToday) {
        const dayElement = document.createElement('div');
        dayElement.className = 'calendar-day-main';
        if (isToday) {
            dayElement.classList.add('today');
        }
        dayElement.dataset.date = dateKey;

        const isWeekend = date.getDay() === 0 || date.getDay() === 6;
        const isHoliday = this.holidays.includes(dateKey);
        if (isWeekend || isHoliday) dayElement.classList.add('holiday');

        const dayNumberElement = document.createElement('div');
        dayNumberElement.className = 'calendar-day-number-main';
        dayNumberElement.textContent = dayNumber;
        dayElement.appendChild(dayNumberElement);

        const eventsContainer = document.createElement('div');
        eventsContainer.className = 'calendar-day-events-main';

        // –î–µ–∂—É—Ä—Å—Ç–≤–∞
        if (this.data.events[dateKey]) {
            this.data.events[dateKey].forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'calendar-event-main';
                eventElement.style.backgroundColor = event.color;
                eventElement.title = `${event.person}\n${event.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}`;
                eventsContainer.appendChild(eventElement);
            });
        }

        // –û—Ç–ø—É—Å–∫–∞
        if (this.data.vacations[dateKey]) {
            const vacationContainer = document.createElement('div');
            vacationContainer.className = 'calendar-vacation-container';
            
            this.data.vacations[dateKey].forEach(vacation => {
                const vacationElement = document.createElement('div');
                vacationElement.className = 'calendar-vacation-main';
                vacationElement.style.backgroundColor = vacation.color;
                vacationElement.title = `–û—Ç–ø—É—Å–∫: ${vacation.person}`;
                vacationContainer.appendChild(vacationElement);
            });
            
            eventsContainer.appendChild(vacationContainer);
        }

        dayElement.appendChild(eventsContainer);
        
        dayElement.addEventListener('click', () => {
            if (this.state.selectionMode === 'day') {
                this.openEventModal(dateKey);
            } else {
                this.handleWeekSelection(date);
            }
        });

        return dayElement;
    },

    initializeCalendarHandlers() {
        document.getElementById('calendarPrev')?.addEventListener('click', () => this.previousMonth());
        document.getElementById('calendarNext')?.addEventListener('click', () => this.nextMonth());
        document.getElementById('calendarToday')?.addEventListener('click', () => this.goToToday());
        document.getElementById('selectionModeBtn')?.addEventListener('click', () => this.toggleSelectionMode());
        document.getElementById('manualSyncBtn')?.addEventListener('click', () => this.manualSync());
    },

    toggleSelectionMode() {
        this.state.selectionMode = this.state.selectionMode === 'day' ? 'week' : 'day';
        const modeBtn = document.getElementById('selectionModeBtn');
        if (modeBtn) {
            modeBtn.innerHTML = this.state.selectionMode === 'day' ? 
                '<i class="fas fa-calendar-day"></i> –†–µ–∂–∏–º: –î–µ–Ω—å' : 
                '<i class="fas fa-calendar-week"></i> –†–µ–∂–∏–º: –ù–µ–¥–µ–ª—è';
        }
    },

    previousMonth() { 
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() - 1); 
        this.renderCalendar(); 
    },
    
    nextMonth() { 
        this.state.currentDate.setMonth(this.state.currentDate.getMonth() + 1); 
        this.renderCalendar(); 
    },
    
    goToToday() { 
        this.state.currentDate = new Date(); 
        this.renderCalendar(); 
    },

    // === –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –ò –°–û–•–†–ê–ù–ï–ù–ò–ï ===
openEventModal(dateKey, weekDates = null) {
    const isWeekMode = weekDates !== null;
    
    let dateString;
    if (isWeekMode) {
        // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        const firstDate = this.parseDateKey(weekDates[0]);
        const lastDate = this.parseDateKey(weekDates[6]);
        dateString = `${firstDate.toLocaleDateString('ru-RU')} - ${lastDate.toLocaleDateString('ru-RU')}`;
    } else {
        // –î–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—Ç—ã
        const date = this.parseDateKey(dateKey);
        dateString = date.toLocaleDateString('ru-RU');
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('üìÖ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', {
            dateKey: dateKey,
            parsedDate: date.toISOString(),
            localDate: date.toLocaleDateString('ru-RU'),
            localTime: date.toLocaleTimeString('ru-RU')
        });
    }

    const modal = this.createModal(dateString, dateKey, weekDates);
    document.body.appendChild(modal);
    this.initializeModalHandlers(modal, dateKey, weekDates);
},

    createModal(dateString, dateKey, weekDates) {
        const modal = document.createElement('div');
        modal.className = 'calendar-modal-overlay';
        modal.innerHTML = `
            <div class="calendar-modal">
                <div class="calendar-modal-header">
                    <h3>${weekDates ? '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞ –Ω–µ–¥–µ–ª—é' : '–î–µ–∂—É—Ä—Å—Ç–≤–æ –Ω–∞'} ${dateString}</h3>
                    <button class="calendar-modal-close">&times;</button>
                </div>
                <div class="calendar-modal-content">
                    <div class="modal-tabs">
                        <button class="tab-btn active" data-tab="duty">–î–µ–∂—É—Ä—Å—Ç–≤–æ</button>
                        <button class="tab-btn" data-tab="vacation">–û—Ç–ø—É—Å–∫</button>
                        <button class="tab-btn" data-tab="event">–°–æ–±—ã—Ç–∏–µ</button>
                    </div>
                    
                    <div class="tab-content" id="dutyTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="person-${person.id}" 
                                               ${this.isPersonOnDuty(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="eventComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="eventComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getEventComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="vacationTab">
                        <div class="duty-persons-list">
                            ${this.dutyPersons.map(person => `
                                <div class="duty-person-item" data-person-id="${person.id}">
                                    <div class="person-color" style="background-color: ${person.color}"></div>
                                    <div class="person-name">${person.name}</div>
                                    <div class="person-checkbox">
                                        <input type="checkbox" id="vacation-person-${person.id}" 
                                               ${this.isPersonOnVacation(dateKey, person.id) ? 'checked' : ''}>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                        <div class="comment-section">
                            <label for="vacationComment">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</label>
                            <textarea id="vacationComment" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${this.getVacationComment(dateKey) || ''}</textarea>
                        </div>
                    </div>
                    
                    <div class="tab-content hidden" id="eventTab">
                        <div class="event-time-section">
                            <label for="eventTime">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</label>
                            <input type="time" id="eventTime" value="09:00">
                        </div>
                        <div class="comment-section">
                            <label for="eventMessage">–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞:</label>
                            <textarea id="eventMessage" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç..."></textarea>
                        </div>
                        <div class="notification-info">
                            <i class="fas fa-info-circle"></i>
                            –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç Telegram –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                        </div>
                    </div>
                </div>
                <div class="calendar-modal-actions">
                    <button class="btn btn-cancel">–û—Ç–º–µ–Ω–∞</button>
                    <button class="btn btn-save">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </div>
        `;
        return modal;
    },

    initializeModalHandlers(modal, dateKey, weekDates) {
        const tabBtns = modal.querySelectorAll('.tab-btn');
        const tabContents = modal.querySelectorAll('.tab-content');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                tabBtns.forEach(b => b.classList.remove('active'));
                tabContents.forEach(c => c.classList.add('hidden'));
                btn.classList.add('active');
                modal.querySelector(`#${btn.dataset.tab}Tab`).classList.remove('hidden');
            });
        });

        const closeModal = () => document.body.removeChild(modal);
        modal.querySelector('.calendar-modal-close').addEventListener('click', closeModal);
        modal.querySelector('.btn-cancel').addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });

        modal.querySelector('.btn-save').addEventListener('click', () => {
            const activeTab = modal.querySelector('.tab-btn.active').dataset.tab;
            const datesToSave = weekDates || [dateKey];

            if (activeTab === 'duty') {
                this.saveDutyEvent(datesToSave);
            } else if (activeTab === 'vacation') {
                this.saveVacationEvent(datesToSave);
            } else if (activeTab === 'event') {
                this.saveChatEvent(datesToSave);
            }

            closeModal();
            this.renderCalendar();
        });
    },

    saveDutyEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('.duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('eventComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.events[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment
                }));
            } else {
                delete this.data.events[date];
            }
        });

        this.saveData();
    },

    saveVacationEvent(datesToSave) {
        const selectedPersons = [];
        document.querySelectorAll('#vacationTab .duty-person-item input[type="checkbox"]:checked').forEach(checkbox => {
            const personId = parseInt(checkbox.id.replace('vacation-person-', ''));
            const person = this.dutyPersons.find(p => p.id === personId);
            if (person) selectedPersons.push(person);
        });

        const comment = document.getElementById('vacationComment')?.value.trim() || '';

        datesToSave.forEach(date => {
            if (selectedPersons.length > 0) {
                this.data.vacations[date] = selectedPersons.map(person => ({
                    ...person,
                    comment: comment,
                    type: 'vacation'
                }));
            } else {
                delete this.data.vacations[date];
            }
        });

        this.saveData();
    },

    
    saveChatEvent(datesToSave) {
    const eventTime = document.getElementById('eventTime')?.value;
    const eventMessage = document.getElementById('eventMessage')?.value.trim();

    if (!eventMessage) {
        DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
        return;
    }

    if (!eventTime) {
        DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
        return;
    }

    datesToSave.forEach(date => {
        const eventDateTime = this.createDateTime(date, eventTime);
        
        if (!eventDateTime) {
            DialogService.showMessage('‚ùå –û—à–∏–±–∫–∞', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏', 'error');
            return;
        }

        this.scheduleTelegramMessage(eventDateTime, eventMessage);
    });

    // –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    DialogService.showMessage('‚úÖ –£—Å–ø–µ—Ö', '–°–æ–±—ã—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', 'success');
},

    
    createDateTime(dateString, timeString) {
        try {
            // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
            const date = new Date(dateString + 'T00:00:00');
            
            if (isNaN(date.getTime())) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã:', dateString);
                return null;
            }

            // –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç HH:MM)
            const [hours, minutes] = timeString.split(':').map(Number);
            
            if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:', timeString);
                return null;
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
            date.setHours(hours, minutes, 0, 0);
            
            console.log('üìÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∞—Ç–∞:', {
                input: `${dateString} ${timeString}`,
                result: date.toISOString(),
                local: date.toLocaleString('ru-RU')
            });

            return date.getTime(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º timestamp

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
            return null;
        }
    },

    
   scheduleTelegramMessage(eventTimestamp, message, chatId = null) {
    const now = Date.now();
    
    if (eventTimestamp <= now) {
        DialogService.showMessage(
            '‚ùå –û—à–∏–±–∫–∞', 
            '–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.',
            'error'
        );
        return null;
    }

    if (!message || message.trim().length === 0) {
        DialogService.showMessage(
            '‚ùå –û—à–∏–±–∫–∞', 
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.',
            'error'
        );
        return null;
    }

    try {
        const messageId = MessageScheduler.scheduleMessage(
            eventTimestamp, 
            message.trim(), 
            chatId,
            {
                type: 'calendar_event',
                dateTime: new Date(eventTimestamp).toISOString(),
                source: 'calendar'
            }
        );

        return messageId;

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        DialogService.showMessage(
            '‚ùå –û—à–∏–±–∫–∞', 
            '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            'error'
        );
        return null;
    }
},

   // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===
isPersonOnDuty(dateKey, personId) {
    return this.data.events[dateKey]?.some(event => event.id === personId);
},

isPersonOnVacation(dateKey, personId) {
    return this.data.vacations[dateKey]?.some(vacation => vacation.id === personId);
},

getEventComment(dateKey) {
    return this.data.events[dateKey]?.[0]?.comment || '';
},

getVacationComment(dateKey) {
    return this.data.vacations[dateKey]?.[0]?.comment || '';
},

getDateKey(date) {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
},

parseDateKey(dateKey) {
    // –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    const [year, month, day] = dateKey.split('-').map(Number);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–¥–µ–Ω—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è
    const date = new Date(year, month - 1, day, 12, 0, 0);
    
    return date;
},

handleWeekSelection(selectedDate) {
    const weekDates = this.getWeekDates(selectedDate);
    const dateKeys = weekDates.map(date => this.getDateKey(date));
    this.openEventModal(dateKeys[0], dateKeys);
},

getWeekDates(date) {
    const dates = [];
    const dayOfWeek = date.getDay();
    const startDate = new Date(date);
    startDate.setDate(date.getDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));
    
    for (let i = 0; i < 7; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);
        dates.push(currentDate);
    }
    
    return dates;
}
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    if (typeof CalendarManager !== 'undefined' && CalendarManager.init) {
        CalendarManager.init();
    }
});